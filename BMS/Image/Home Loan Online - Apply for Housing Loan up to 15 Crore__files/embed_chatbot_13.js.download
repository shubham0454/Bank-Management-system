SERVER_URL='https://hdfc-ltd.allincall.in';BOT_ID=1;BOT_NAME='uat';BOT_THEME='1';BOT_POSITION='bottom-right';bot_click_image = 'true';is_form_assist='false';is_lead_generation='false';is_easyassist_enabled='false';easyassist_token='';var web_landing_list=[{'selected_language': 'en', 'data': []}, {'selected_language': 'hi', 'data': '[]'}];notif_and_cross_div = document.createElement('div');notif_and_cross_div.innerHTML ="<div id='notif_and_cross_div' onmouseover='show_cross()' onmouseout='dont_show_cross()' style='position:fixed;right:90px;bottom:7em;height:100px;width:400px;display:none;z-index:9999999999'><svg onclick='hide_notification()' id='cross-chatbox-notification' width='28' height='28' viewBox='0 0 28 28' fill='none' xmlns='http://www.w3.org/2000/svg' style='position: fixed;cursor: pointer;right: 90px;bottom: 12.5em;z-index: 2147483647;display: none;'><circle cx='14' cy='14' r='14' fill='#3871F0' fill-opacity='0.08'></circle><path d='M10.3335 9.21192L14.0001 12.8781L17.6667 9.22303C17.7388 9.14959 17.8255 9.09192 17.9211 9.05367C18.0167 9.01542 18.1193 8.99743 18.2222 9.00084C18.4242 9.01391 18.6145 9.10004 18.7576 9.24315C18.9007 9.38625 18.9869 9.57656 19 9.77852C19.001 9.87782 18.9818 9.97629 18.9436 10.068C18.9054 10.1596 18.849 10.2426 18.7777 10.3118L15.1001 14.0002L18.7777 17.6886C18.9222 17.8286 19.0022 18.0219 19 18.2219C18.9869 18.4239 18.9007 18.6142 18.7576 18.7573C18.6145 18.9004 18.4242 18.9865 18.2222 18.9996C18.1193 19.003 18.0167 18.985 17.9211 18.9468C17.8255 18.9085 17.7388 18.8508 17.6667 18.7774L14.0001 15.1223L10.3446 18.7774C10.2724 18.8508 10.1858 18.9085 10.0902 18.9468C9.99455 18.985 9.89203 19.003 9.78909 18.9996C9.58334 18.9889 9.38886 18.9023 9.24317 18.7567C9.09749 18.611 9.01094 18.4165 9.00023 18.2108C8.99922 18.1115 9.0184 18.013 9.0566 17.9214C9.0948 17.8297 9.15122 17.7467 9.22244 17.6775L12.9001 14.0002L9.21133 10.3118C9.14211 10.2416 9.08775 10.1583 9.05147 10.0666C9.0152 9.97502 8.99777 9.87703 9.00023 9.77852C9.0133 9.57656 9.09944 9.38625 9.24256 9.24315C9.38568 9.10004 9.576 9.01391 9.77798 9.00084C9.88012 8.99599 9.98215 9.01223 10.0777 9.04854C10.1733 9.08486 10.2604 9.14048 10.3335 9.21192V9.21192Z' fill='#3871F0'></path></svg><svg width='351' height='117' viewBox='0 0 351 117' fill='none' xmlns='http://www.w3.org/2000/svg' style='position: fixed;cursor: pointer;right: 80px;bottom: 5em;z-index: 2147483647;display: none;' id='chatbox-notification' onclick='open_up_bot()' class='animate__animated animate__pulse'><g filter='url(#filter0_d)'><rect x='15' y='15' width='321' height='62' rx='31' fill='white'></rect><path d='M298.764 102C298.764 102 270.667 92.1219 268.253 73.243H295.013C288.51 76.7439 282.248 82.7811 298.764 102Z' fill='white'></path></g><defs><filter id='filter0_d' x='0' y='0' width='351' height='117' filterUnits='userSpaceOnUse' color-interpolation-filters='sRGB'><feFlood flood-opacity='0' result='BackgroundImageFix'></feFlood><feColorMatrix in='SourceAlpha' type='matrix' values='0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0'></feColorMatrix><feOffset></feOffset><feGaussianBlur stdDeviation='7.5'></feGaussianBlur><feColorMatrix type='matrix' values='0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.1 0'></feColorMatrix><feBlend mode='normal' in2='BackgroundImageFix' result='effect1_dropShadow'></feBlend><feBlend mode='normal' in='SourceGraphic' in2='effect1_dropShadow' result='shape'></feBlend></filter></defs><text x='50%' y='40%' dominant-baseline='middle' text-anchor='middle' fill='#4D4D4D' id='prompt-text'>I love SVG</text></svg></div><svg  class='animate__animated animate__fadeIn' id='one-popup-on-bot' width='25' height='25' viewBox='0 0 22 22' fill='none' xmlns='http://www.w3.org/2000/svg' style='position: fixed;cursor: pointer;right: 34px;bottom: 8.3em;z-index: 99999999999999999999;display: none;'><circle cx='11' cy='11' r='11' fill='#E82D2D'></circle><path d='M7.93018 8.85889V7.1084C8.90674 7.1084 9.58789 6.979 9.97363 6.72021C10.3594 6.46143 10.5522 6.05371 10.5522 5.49707H12.7275V16H10.3765V8.85889H7.93018Z' fill='white'></path></svg>";try{document.body.appendChild(notif_and_cross_div);}catch(err){window.onload = () => {document.body.appendChild(notif_and_cross_div)};}var easychat_form_assist_id = ""
var easychat_page_category = ""
var easychat_minimized_chatbot = false
var easychat_do_not_disturb = ""
var easychat_window_location = encodeURIComponent(window.location.href);
var website_cookies = ""
var meta_tags_information = ""
var form_assist_tags = "";
var is_bot_minimized = false
var easychat_intent_name = ""
var is_web_landing_allowed = 'false'
var campaign_link_query_id = "INTENT_ID"
var prompt_message = ""
var chat_bot_maximized = false
var prompt_text_font_family = ""
var auto_popup = null;
var is_bot_loaded = false;
var auto_pop_up_denied = "false";
var count_of_chunk = 0
var total_length_of_chunk = 0
var suggestion_list = []
var db;
var db_name = "suggestion_list"
var table_name = "suggestion_list_table"
var table_index = "suggestion_list_key"
var last_bot_updated_time = 0
var allowed_hosts_list = []
var initial_trigger_intents = []
var is_initial_trigger_intent = false
var selected_language = "en";
var web_page_source = get_web_page_source()
var MAXIMIZE_TEXT = "Click here to maximize"
var MINIMIZE_TEXT = "Click here to minimize"
var welcome_banner_query_question = "INTENT_NAME";
var external_trigger_intent_info = "INTENT_INFO";
var is_voice_based_form_assist_enabled = false;
var popup_enabled = false
var easychat_popup_image
var easychat_popup_min_image
var easychat_popup_minimize
var easychat_popup_minimize_tooltip
var easychat_popup_maximize
var easychat_popup_maximize_tooltip
var web_landing_notification_appended = false;
var is_greeting_bubble_closed = false;

/////////////////////////////// Encryption //////////////////////////

function easychat_set_cookie(cookiename, cookievalue, expiration, path) {

    var secure = "";
    if(window.location.protocol == "https:") {

        secure = "; secure;"
    }

    if (path==""){

        document.cookie = cookiename + "=" + cookievalue+"; expires="+expiration + secure;
    }else{

        document.cookie = cookiename + "=" + cookievalue+"; path="+path+"; expires="+expiration + secure;
    }
}


function custom_encrypt(msgString, key) {
    // msgString is expected to be Utf8 encoded
    var iv = EasyChatCryptoJS.lib.WordArray.random(16);
    var encrypted = EasyChatCryptoJS.AES.encrypt(msgString, EasyChatCryptoJS.enc.Utf8.parse(key), {
        iv: iv
    });
    var return_value = key;
    return_value += "." + encrypted.toString();
    return_value += "." + EasyChatCryptoJS.enc.Base64.stringify(iv);
    return return_value;
}

function generate_random_string(length) {
    var result = '';
    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var charactersLength = characters.length;
    for (var i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}


function encrypt_variable(data) {

    utf_data = EasyChatCryptoJS.enc.Utf8.parse(data);
    encoded_data = utf_data;
    random_key = generate_random_string(16);
    encrypted_data = custom_encrypt(encoded_data, random_key);

    return encrypted_data;
}


////////////////////////////////////////////////////////////////////////////////////

function get_web_page_source(){
    if(document.referrer != "" && document.referrer != undefined && document.referrer != null)
        return (document.referrer).split('?')[0];
    else
        return 'direct/(Google)';
}


function show_web_landing_notification(auto_pop_up_text, bot_theme_color, bot_position, easychat_popup_min_image) {

    if(web_landing_notification_appended){
        return;
    }
    var popup_id_and_classes = get_popup_id_and_classes(bot_position)
    var id_popup_wrapper = popup_id_and_classes[0]
    var class_popup_wrapper = popup_id_and_classes[1]
    var class_pop_up_image_wrapper = popup_id_and_classes[2]
    var class_greeting_notification_wrapper = popup_id_and_classes[3]
    var notification_message_div = '<div class="notification-message-div" id="notification-message-div" style="display:none">\
                <div class="notification-message-hide-div" onclick="hide_auto_pop_up_notification_text()">\
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\
                        <circle cx="12" cy="12" r="11.5" fill="white" stroke="#' + bot_theme_color + '"></circle>\
                        <path d="M16.1839 17L12.5029 13.3156L8.82186 17L8 16.1787L11.6868 12.5L8 8.82134L8.82186 8L12.5029 11.6844L16.1839 8.00578L17 8.82134L13.319 12.5L17 16.1787L16.1839 17Z" fill="#' + bot_theme_color + '"></path>\
                    </svg></div>\
                <div class="allincall-notification-message" onclick="open_up_bot()" style="border: 1px solid #' + bot_theme_color + ';">\
                <span> <svg width="28" height="26" viewBox="0 0 28 26" fill="none" xmlns="http://www.w3.org/2000/svg">\
                <path d="M10.8896 17.2108L6.68998 11.8405C6.68998 11.8405 5.86993 10.2885 8.0351 10.1679C8.0351 10.1679 7.07822 8.44705 9.41351 7.95764C9.41351 7.95764 8.39557 6.90729 9.47268 6.15549C10.5498 5.40368 11.3032 6.66714 11.3032 6.66714C11.3032 6.66714 12.6303 4.65722 13.7123 6.04074C14.7942 7.42426 17.3097 10.5104 17.3097 10.5104C17.3097 10.5104 17.5153 7.53379 18.9477 7.22838C20.0809 6.98676 20.3276 7.73942 20.3276 7.73942C20.3276 7.73942 20.6095 10.3757 20.8806 11.4605C21.2576 12.9685 21.2556 14.5389 20.7254 15.5043L22.647 17.9617L16.7544 21.3638L15.0816 19.0005C15.0818 19.0005 12.7019 19.5282 10.8896 17.2108Z" fill="#FFD3B4"></path>\
                <path d="M17.8963 6.8808C17.1904 7.08995 16.6113 7.65362 16.4551 8.28353L16.1311 9.59087L12.8952 5.56503C12.6927 5.30703 12.3692 5.1574 11.9843 5.14364C11.5986 5.12984 11.1972 5.2541 10.8542 5.49353C10.6405 5.64271 10.4701 5.82326 10.3474 6.01718C9.8672 5.46932 8.94834 5.4056 8.26151 5.88506C7.90833 6.1316 7.67143 6.47887 7.59459 6.86288C7.52658 7.20259 7.59313 7.53503 7.78187 7.80679C7.54522 7.86184 7.31348 7.96496 7.10368 8.11143C6.76065 8.35084 6.51703 8.67677 6.41767 9.02913C6.3389 9.30844 6.35864 9.57767 6.47085 9.80635C6.22741 9.8605 5.98852 9.96566 5.77264 10.1163C5.43019 10.3553 5.18626 10.6803 5.08584 11.0312C4.98511 11.3833 5.0407 11.7191 5.24235 11.977L9.81505 17.8243C10.6978 18.9532 12.1727 19.5466 13.8853 19.4695L15.3883 21.6038C15.492 21.751 15.727 21.7759 15.9264 21.6608L21.819 18.2587C21.927 18.1964 22.0091 18.1011 22.0449 17.9967C22.0807 17.8923 22.0667 17.7886 22.0065 17.7116L20.1866 15.3844C20.4727 14.6697 21.1083 12.9046 20.2883 11.2934L19.7904 7.80573C19.7361 7.42552 19.5089 7.11981 19.1507 6.9449C18.7926 6.76999 18.3471 6.74725 17.8963 6.8808ZM18.963 8.04675L19.4676 11.5814C19.4722 11.6132 19.4818 11.6433 19.4964 11.6709C20.2728 13.1475 19.5867 14.8345 19.3612 15.3889L19.3361 15.4508C19.2916 15.5612 19.3031 15.6733 19.3673 15.7552L21.0525 17.9103L15.9379 20.8632L14.5197 18.8493C14.456 18.7587 14.339 18.7111 14.2056 18.7214C12.659 18.8402 11.3203 18.3307 10.5326 17.3235L5.95993 11.4762C5.87205 11.3638 5.8479 11.217 5.89201 11.0629C5.93639 10.9078 6.04444 10.764 6.19621 10.6581C6.34818 10.5521 6.52523 10.4968 6.69515 10.5023C6.86398 10.5078 7.00542 10.5727 7.0933 10.685L9.74996 14.0822C9.87267 14.2391 10.1677 14.2621 10.3765 14.1118C10.5672 13.9745 10.6303 13.741 10.5165 13.5955L7.29516 9.47616C7.20586 9.36194 7.18078 9.21345 7.2246 9.05797C7.26844 8.90253 7.37592 8.75874 7.52727 8.65312C7.67849 8.54754 7.85561 8.49268 8.02576 8.49876C8.19591 8.50485 8.33883 8.57109 8.42813 8.68531L11.6495 12.8047C11.7713 12.9604 12.0325 12.9554 12.2327 12.8155C12.4324 12.676 12.513 12.4416 12.3918 12.2865L8.54056 7.36173C8.42201 7.21013 8.37731 7.02382 8.41469 6.83706C8.44799 6.67097 8.54398 6.52524 8.68514 6.42673C8.99728 6.20882 9.4409 6.27335 9.67364 6.5709L13.5249 11.4957C13.6464 11.651 13.9075 11.6466 14.1074 11.5071C14.3075 11.3674 14.3887 11.133 14.2672 10.9776L11.0457 6.85827C10.8613 6.62248 10.9655 6.25327 11.2779 6.03523C11.4293 5.92957 11.6062 5.87477 11.7764 5.88085C11.9465 5.88693 12.0895 5.95318 12.1788 6.0674L12.181 6.07025L15.8671 10.6562L15.7576 11.0978C15.4527 11.3918 14.6874 12.2258 14.5502 13.3047C14.5245 13.5074 14.689 13.6551 14.9176 13.6346C15.1462 13.6141 15.3525 13.4332 15.3783 13.2304C15.5058 12.2274 16.3781 11.4707 16.3855 11.4643C16.4638 11.3983 16.5185 11.3144 16.5401 11.2274L17.2682 8.28957C17.3475 7.96948 17.6418 7.68302 18.0006 7.57674C18.2296 7.50885 18.456 7.52045 18.638 7.60933C18.82 7.69819 18.9354 7.85357 18.963 8.04675Z" fill="black"></path>\
                <path d="M19.842 3.30215C20.0513 3.18129 20.1445 2.95077 20.0501 2.78727C19.9557 2.62378 19.7095 2.58923 19.5002 2.7101C19.2908 2.83097 19.1976 3.06149 19.292 3.22498C19.3864 3.38847 19.6326 3.42302 19.842 3.30215Z" fill="black"></path>\
                <path d="M14.2341 5.11155C14.2492 5.10001 15.7715 3.95113 17.8577 3.52672C18.0976 3.47788 18.2876 3.25713 18.2646 3.05513C18.244 2.87405 18.0565 2.76504 17.842 2.80864C15.5149 3.28213 13.8422 4.54435 13.7722 4.59783C13.5806 4.74408 13.5288 4.9776 13.6564 5.11947C13.784 5.26134 14.0426 5.25769 14.2341 5.11155Z" fill="black"></path>\
                <path d="M15.3205 5.2931C15.1184 5.42546 15.0433 5.65761 15.152 5.81233C15.2608 5.96707 15.5132 5.9857 15.7159 5.85382C15.7358 5.841 17.7198 4.57136 19.9704 4.80634C20.201 4.83039 20.455 4.65935 20.5096 4.44422C20.557 4.25715 20.4367 4.09407 20.2365 4.07319C17.6329 3.80134 15.4137 5.23209 15.3205 5.2931Z" fill="black"></path>\
                <path d="M5.53285 14.7613C5.66201 14.5728 5.61311 14.3581 5.42338 14.2814C5.23337 14.2046 4.97403 14.2954 4.84429 14.484C4.80817 14.5365 3.95937 15.7869 3.90517 17.3235C3.89866 17.5078 4.05843 17.6399 4.26837 17.6241C4.50946 17.6059 4.73067 17.4008 4.73814 17.1897C4.78459 15.873 5.52539 14.7723 5.53285 14.7613Z" fill="black"></path>\
                <path d="M5.89352 16.0002C5.87206 16.0523 5.37051 17.2913 5.59341 18.5169C5.62661 18.6995 5.83239 18.7977 6.0518 18.7352C6.28372 18.6691 6.45236 18.4472 6.41726 18.2542C6.22897 17.2189 6.66503 16.1289 6.67124 16.1137C6.75364 15.9126 6.64679 15.7242 6.4323 15.6927C6.21749 15.6613 5.97627 15.7989 5.89352 16.0002Z" fill="black"></path>\
            </svg></span><span style="white-space: break-spaces;position: relative;top: -6px;font-family:' + prompt_text_font_family + '"> '+ auto_pop_up_text+'</span></div></div>'
    notification_counter='<div class="allincall-notification-div" onclick="open_up_bot()" id="allincall-notification-count" style="display:none">1</div>'
    if(document.getElementsByClassName('allincall-popup-image-icon-wrapper')[0]){
        wrapper_html = '<div class="' + class_greeting_notification_wrapper + '">' 
        html = wrapper_html + notification_message_div + '</div>' + notification_counter
        document.getElementsByClassName('allincall-popup-image-icon-wrapper')[0].insertAdjacentHTML('beforeend', html)
        web_landing_notification_appended = true;
        return;
    }
    wrapper_html = '<div id="' + id_popup_wrapper + '" class="' + class_popup_wrapper + '"><div class="' + class_pop_up_image_wrapper + '"><div class="' + class_greeting_notification_wrapper + '">' 
    notification_message_div_element = document.createElement("div");
    notification_message_div_element.setAttribute("easyassist_avoid_sync", "true")
    // changed code
                notification_message_div_element.innerHTML += wrapper_html + notification_message_div  + '</div></div></div>';                
    // end changed code

    notification_counter_element = document.createElement("div");
    notification_counter_element.innerHTML += notification_counter;

    document.body.appendChild( notification_message_div_element)

    var easychat_popup_image_div = ''
    if (is_minimization_enabled) {

        easychat_popup_image_div += easychat_popup_image.outerHTML + easychat_popup_min_image.outerHTML +
                                              easychat_popup_minimize.outerHTML + easychat_popup_maximize.outerHTML

        document.getElementsByClassName(class_pop_up_image_wrapper)[0].appendChild(notification_counter_element)
        document.getElementsByClassName(class_pop_up_image_wrapper)[0].innerHTML += easychat_popup_image_div

        document.getElementById("allincall-minimize-popup").appendChild(easychat_popup_minimize_tooltip)
        document.getElementById("allincall-maximize-popup").appendChild(easychat_popup_maximize_tooltip)
    } else {
        easychat_popup_image_div += easychat_popup_image.outerHTML

        document.getElementsByClassName(class_pop_up_image_wrapper)[0].appendChild(notification_counter_element)
        document.getElementsByClassName(class_pop_up_image_wrapper)[0].innerHTML += easychat_popup_image_div

    }
    web_landing_notification_appended = true;
}


function show_web_landing_intents(bot_theme_color, bot_position, easychat_popup_min_image) {
    if (is_auto_pop_allowed_desktop || is_auto_pop_allowed_mobile || is_form_assist_auto_pop_allowed){
        return
        // no need to show web_landing in case of form assist is enabled or auto pop up is enabled
    }
    if(is_minimization_enabled && window.disable_auto_popup_minimized && get_cookie('is_bot_minimized') == 'true'){
        return
    }
    var current_url = window.location.href;
    try {
        if(web_landing_list.length > 0) {

            for(var i = 0; i < web_landing_list.length; i++) {

                if(selected_language == web_landing_list[i]["selected_language"]) {
                    try{
                        web_landing_list = JSON.parse(web_landing_list[i]["data"]);
                    }catch(err){
                        console.log(err);
                        web_landing_list = web_landing_list[i]["data"];
                    }
                    break;
                }
            }
        }
        if (web_landing_list.length > 0) {
            for (var i = 0; i < web_landing_list.length; i++) {
                url = web_landing_list[i]["url"]
                intent_name = web_landing_list[i]["intent_name"]
                if (url == current_url) {
                    popup_enabled = true
                    easychat_intent_name = intent_name;
                    is_web_landing_allowed = 'true';
                    try {
                        if (web_landing_list[i]["show_prompt_message_after_timer"] == 'true') {
                            prompt_message = web_landing_list[i]["prompt_message"];
                            show_web_landing_notification(prompt_message, bot_theme_color, bot_position, easychat_popup_min_image);
                            prompt_message_timer = parseInt(web_landing_list[i]["prompt_message_timer"]) * 1000;
                            setTimeout(function(e) {
                                if (chat_bot_maximized == false || (window.disable_auto_popup_minimized && get_cookie('is_bot_minimized') != 'true' && !easychat_minimized_chatbot)) {
                                    setTimeout(function(e) {
                                        if(window.disable_auto_popup_minimized && get_cookie('is_bot_minimized') == 'true'){
                                            return
                                        }
                                        document.getElementById("allincall-notification-count").style.display="flex"
                                        document.getElementById("notification-message-div").style.display="block"
                                        if(BOT_POSITION.indexOf("top") != -1 && document.getElementById("notification-message-div").parentNode.className.indexOf("greeting") != -1) {
                                            document.getElementById("notification-message-div").style.display="flex"
                                        }
                                    }, 800)   
                                }
                            }, prompt_message_timer);
                        }
                    } catch (err) { console.log(err) }
                }
            }
        }
    } catch (err) {}
}

function check_campaign_link() {
    if(window.disable_auto_popup_minimized && get_cookie('is_bot_minimized') == 'true') return;
    if(chat_bot_maximized) return;
    var campaign_link_intent = easychat_get_url_vars()["easychat_query"]
    if (campaign_link_intent != undefined && campaign_link_intent != "" && campaign_link_intent != null) {
        campaign_link_query_id = campaign_link_intent
        document.getElementById("allincall-popup").click();
    }
}

function check_welcome_banner_question() {
    if(window.disable_auto_popup_minimized && get_cookie('is_bot_minimized') == 'true') return;
    if(chat_bot_maximized) return;
    var query_question = easychat_get_url_vars()["query_question"];
    if (query_question != undefined && query_question != "" && query_question != null) {
        welcome_banner_query_question = query_question;
        document.getElementById("allincall-popup").click()
    }
}

function check_auto_popup(){

    let bot_minimized_state = get_cookie("is_bot_minimized");

    if(is_greeting_bubble_closed) return;

    if(bot_minimized_state != 'true') {
        auto_pop_up_denied = get_cookie("auto_pop_up_denied");

        var isMobile = (('ontouchstart' in document.documentElement && (/mobi/i.test(navigator.userAgent))) || (navigator.userAgent.match(/(iPad)/) || (navigator.platform === 'MacIntel' && typeof navigator.standalone !== "undefined")));
        
        if(isMobile){
            if (is_auto_pop_allowed_mobile == true && is_form_assist_auto_pop_allowed == false && auto_pop_up_denied != "true"  && correct_path_of_bot_for_autopopup() == true) {
    
                if (!is_auto_popup_inactivity_enabled) {
                    trigger_autopopup_functionality(auto_pop_up_timer, auto_popup_type)
                }  else {                    
                    auto_popup_inactivity_detector(auto_pop_up_timer, auto_popup_type)
                }
            }
        }
        else{
            if (is_auto_pop_allowed_desktop == true && is_form_assist_auto_pop_allowed == false && auto_pop_up_denied != "true"  && correct_path_of_bot_for_autopopup() == true) {
                
                if (!is_auto_popup_inactivity_enabled) {                   
                    trigger_autopopup_functionality(auto_pop_up_timer, auto_popup_type)
                } else {                    
                    auto_popup_inactivity_detector(auto_pop_up_timer, auto_popup_type)
                }
            }                
        }
    }
}

// Get Webiste Cookies
function getCookies() {
    var pairs = document.cookie.split(";");
    var cookies = {};
    for (var i = 0; i < pairs.length; i++) {
        var pair = pairs[i].split("=");
        cookies[(pair[0] + '').trim()] = unescape(pair.slice(1).join('='));
    }
    return cookies;
}

function get_cookie(cookiename) {
    var cookie_name = cookiename + "=";
    var decodedCookie = decodeURIComponent(document.cookie);
    var cookie_array = decodedCookie.split(';');
    for (var i = 0; i < cookie_array.length; i++) {
        var c = cookie_array[i];
        while (c.charAt(0) == ' ') {
            c = c.substring(1);
        }
        if (c.indexOf(cookie_name) == 0) {
            return c.substring(cookie_name.length, c.length);
        }
    }
    return "";
}

// Get Webiste META Data
var meta_tag_filter_list = ["title", "description", "keywords"];

function get_meta_tag_information() {
    var meta_tags = document.getElementsByTagName("meta");
    var meta_tag_dict = {};
    for (var index = 0; index < meta_tags.length; index++) {
        var meta_tag_name = meta_tags[index].getAttribute("name");
        for (var m_index = 0; m_index < meta_tag_filter_list.length; m_index++) {
            if (meta_tag_name == meta_tag_filter_list[m_index]) {
                meta_tag_dict[meta_tag_name] = meta_tags[index].getAttribute("content");
            }
        }
    }
    return meta_tag_dict;
}




// Include CSS files
function easychat_add_css(filename) {
    var head = document.getElementsByTagName('head')[0];
    var style = document.createElement('link');
    style.href = filename;
    style.type = 'text/css';
    style.rel = 'stylesheet';
    document.head.appendChild(style);
}

// Include script files
function easychat_add_script(filename) {
    var head = document.getElementsByTagName('head')[0];
    var script = document.createElement('script');
    script.src = filename;
    script.type = 'text/javascript';
    document.head.appendChild(script)
}

if( document.readyState !== 'loading' ) {
    initialize_easychat_bot();
} else  {
    document.addEventListener("DOMContentLoaded", function(event) {
        initialize_easychat_bot();
    });    
}

function initialize_easychat_bot() {
    easychat_add_css(SERVER_URL + "/static/EasyChatApp/css/embed.css");
    easychat_add_css(SERVER_URL + "/static/EasyChatApp/css/theme1_embed.css");
    easychat_add_css(SERVER_URL + "/static/EasyChatApp/css/themes_popup.css");
    //easychat_add_css(SERVER_URL + "/static/EasyChatApp/font-awesome-4.7.0/css/font-awesome.min.css");
    easychat_add_script(SERVER_URL + "/static/EasyChatApp/js/easychat-crypto.js");
    easychat_add_css(SERVER_URL + "/static/EasyChatApp/css/animate.css");    

    setTimeout(function() {
        load_easychat_bot();
    }, 300)
}

function get_form_assist_tags() {
    var xhttp = new XMLHttpRequest();
    var params = '&bot_id=' + BOT_ID;
    xhttp.open("POST", SERVER_URL + "/chat/get-form-assist-tags/", true);
    xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
            response = JSON.parse(this.responseText);
            if (response["status"] == 200) {
                window.form_assist_tags = response["form_assist_tags"];
            }
        }
    }
    xhttp.send(params);

}


// Import form assist code when form assist is allowed
if (is_form_assist == "true") {
    easychat_add_script(SERVER_URL + "/static/EasyChatApp/js/form_assist.js");
    get_form_assist_tags();
}

if (is_easyassist_enabled == "true") {
    easychat_add_script(SERVER_URL + "/static/EasyAssistApp/js/easy-assist-v6.js?key=" + easyassist_token);
}

// var slideIndex = 1;

function easychat_get_url_vars() {
    var vars = {};
    var parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function(m, key, value) {
        vars[key] = value;
    });
    return vars;
}

function set_easychat_selected_language(language) {

    // Setting default language English(en)
    if(window.localStorage['selected_language'] == null || window.localStorage['selected_language'] == undefined) {

        window.localStorage['selected_language'] = language;
    } else {

        selected_language = window.localStorage['selected_language'];
    }
}

function get_easychat_selected_language() {

    // Setting default language English(en)
    if(window.localStorage['selected_language'] == null || window.localStorage['selected_language'] == undefined) {

        return selected_language
    } else {

        selected_language = window.localStorage['selected_language'];
        return selected_language
    }
}

// On windows loads
// window.onload = function() {
//     load_easychat_bot();
// }

function auto_popup_inactivity_detector(auto_pop_up_timer, auto_popup_type) {
    var idleTime = 0;
    var bot_triggered = false;
        // Increment the idle time counter every minute.
        var idleInterval = setInterval(timerIncrement, 1000); // 1 sec

        // Zero the idle timer on user movement.
        window.onscroll = function(e) {
            idleTime = 0;
        }
        document.onkeypress = document.onmousemove = document.mousedown = document.mouseup = document.onkeydown = document.onkeyup = document.focus = function(){
            idleTime = 0;
        };
    
    function timerIncrement() {
        idleTime = idleTime + 1
        if(idleTime >= auto_pop_up_timer && !bot_triggered)
        {
            trigger_autopopup_functionality(0.5, auto_popup_type)
            bot_triggered = true
            clearInterval(idleInterval)

        }
    }
}


function load_easychat_bot() {
    if (is_bot_loaded) return;

    set_easychat_selected_language(selected_language);

    is_bot_loaded = true;
    if (is_lead_generation == 'true') {
        is_form_assist = 'false'
    }
    try {
        website_cookies = getCookies()
        website_cookies = JSON.stringify(website_cookies)
        website_cookies = encrypt_variable(website_cookies)

        meta_tags_information = get_meta_tag_information()
        meta_tags_information = JSON.stringify(meta_tags_information)
        meta_tags_information = encrypt_variable(meta_tags_information)
    } catch (err) {
        console.log(err)
    }
    //If form asssit is true call form assist function in form_assist.js

    var easychat_iframe = document.createElement('iframe');
    easychat_iframe.style.display = "none";
    easychat_iframe.id = "allincall-chat-box";
    easychat_iframe.frameborder = "0";
    easychat_iframe.zIndex = "2147483647";
    easychat_iframe.backgroundColor = "white";
    easychat_iframe.allow = "microphone";
    easychat_iframe.setAttribute("easyassist_avoid_sync", "true");

    document.body.appendChild(easychat_iframe);

    url_parameters = easychat_get_url_vars();
    var xhttp = new XMLHttpRequest();
    var json_string = JSON.stringify({
        bot_id: BOT_ID,
        web_page: window.location.href,
        web_page_source: web_page_source,
        selected_language: selected_language,
    })
    json_string = encodeURIComponent(json_string)
    var params = 'json_string=' + json_string;
    xhttp.open("POST", SERVER_URL + "/chat/get-bot-image/", true);
    xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
            response = JSON.parse(this.responseText);

            selected_language = response.selected_language;
            MINIMIZE_TEXT = response.minimize_text;
            MAXIMIZE_TEXT = response.maximize_text;
            prompt_text_font_family = response.font_style;
            prompt_text_family_to_pass_in_google_api = prompt_text_font_family.replace(" ", '+');
            last_bot_updated_time = response.last_bot_updated_time;
            window.disable_auto_popup_minimized = response.disable_auto_popup_minimized
            
            if(get_cookie('last_bot_updated_time') != last_bot_updated_time){
                load_storage();
                get_suggestions();
            }
            easychat_set_cookie("last_bot_updated_time",last_bot_updated_time,"","")
            easychat_add_css("https://fonts.googleapis.com/css?family=" + prompt_text_family_to_pass_in_google_api)
            var bot_theme_color = response.bot_theme_color
            var bot_theme_light_color = response.bot_theme_light_color

            allowed_hosts_list = response["allowed_hosts"]
            easychat_popup_image = document.createElement("img");
            initial_trigger_intents = JSON.parse(response["auto_popup_initial_messages"]);
            easychat_popup_image.id = "allincall-popup";
            easychat_popup_image.style.position = "fixed";
            easychat_popup_image.style.cursor = "pointer";
            easychat_popup_image.style.right = "20px";
            easychat_popup_image.style.bottom = "0em";
            easychat_popup_image.style.width = "6.5em";
            easychat_popup_image.style.zIndex = "2147483647";
            easychat_popup_image.setAttribute("easyassist_avoid_sync", "true");

            is_minimization_enabled = response.is_minimization_enabled
            if (is_minimization_enabled) {
                easychat_popup_min_image = document.createElement("img");
                easychat_popup_min_image.id = "allincall-min-popup";
                easychat_popup_min_image.style.position = "fixed";
                easychat_popup_min_image.style.cursor = "pointer";
                easychat_popup_min_image.style.right = "21px";
                easychat_popup_min_image.style.bottom = "5em";
                easychat_popup_min_image.style.width = "54px";
                easychat_popup_min_image.style.zIndex = "2147483647";
                easychat_popup_min_image.style.display = "none";

                easychat_popup_minimize = document.createElement("span");
                easychat_popup_minimize.id = "allincall-minimize-popup";
                easychat_popup_minimize.innerHTML = '<svg width="12" height="12" viewBox="0 0 12 12" fill="#7B7A7B" xmlns="http://www.w3.org/2000/svg">\
                                                        <path d="M5.99997 8.30913C6.2037 8.30939 6.39766 8.22188 6.5323 8.06898L9.55296 4.63607C9.69278 4.48436 9.73947 4.26882 9.67496 4.07285C9.61044 3.87688 9.44484 3.73122 9.24224 3.69225C9.03963 3.65327 8.83181 3.72709 8.69919 3.88514L6.05785 6.88702C6.04323 6.90369 6.02214 6.91325 5.99997 6.91325C5.97779 6.91325 5.9567 6.90369 5.94208 6.88702L3.30074 3.88452C3.16812 3.72648 2.9603 3.65266 2.7577 3.69163C2.55509 3.73061 2.38949 3.87626 2.32498 4.07223C2.26046 4.2682 2.30715 4.48375 2.44698 4.63546L5.46671 8.06775C5.60158 8.22102 5.79581 8.30894 5.99997 8.30913Z" />\
                                                        <mask id="mask0_22_172" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="2" y="3" width="8" height="6">\
                                                        <path d="M5.99997 8.30913C6.2037 8.30939 6.39766 8.22188 6.5323 8.06898L9.55296 4.63607C9.69278 4.48436 9.73947 4.26882 9.67496 4.07285C9.61044 3.87688 9.44484 3.73122 9.24224 3.69225C9.03963 3.65327 8.83181 3.72709 8.69919 3.88514L6.05785 6.88702C6.04323 6.90369 6.02214 6.91325 5.99997 6.91325C5.97779 6.91325 5.9567 6.90369 5.94208 6.88702L3.30074 3.88452C3.16812 3.72648 2.9603 3.65266 2.7577 3.69163C2.55509 3.73061 2.38949 3.87626 2.32498 4.07223C2.26046 4.2682 2.30715 4.48375 2.44698 4.63546L5.46671 8.06775C5.60158 8.22102 5.79581 8.30894 5.99997 8.30913Z" fill="white"/>\
                                                        </mask>\
                                                        <g mask="url(#mask0_22_172)">\
                                                        </g>\
                                                    </svg>'
                                                                                        
                easychat_popup_minimize.setAttribute("easyassist_avoid_sync", "true");

                easychat_popup_minimize_tooltip = document.createElement("span");
                easychat_popup_minimize_tooltip.id = "allincall-minimize-popup-tooltip";
                easychat_popup_minimize_tooltip.textContent = MINIMIZE_TEXT;
                easychat_popup_minimize_tooltip.style.visibiity = "hidden";
                easychat_popup_minimize_tooltip.style.fontFamily = prompt_text_font_family;
                easychat_popup_minimize_tooltip.style.backgroundColor = bot_theme_light_color;

                easychat_popup_maximize = document.createElement("span");
                easychat_popup_maximize.id = "allincall-maximize-popup";
                easychat_popup_maximize.innerHTML = '<svg width="8" height="9" viewBox="0 0 8 9" fill="#7B7A7B" xmlns="http://www.w3.org/2000/svg">\
                                                        <path d="M4.19989 2.5836C4.34249 2.58343 4.47827 2.64468 4.57252 2.75171L6.68698 5.15475C6.78486 5.26094 6.81754 5.41182 6.77238 5.549C6.72722 5.68618 6.6113 5.78814 6.46947 5.81542C6.32765 5.84271 6.18218 5.79103 6.08934 5.6804L4.2404 3.57909C4.23017 3.56742 4.21541 3.56072 4.19989 3.56072C4.18436 3.56072 4.1696 3.56742 4.15937 3.57909L2.31043 5.68083C2.21759 5.79146 2.07212 5.84314 1.9303 5.81586C1.78847 5.78857 1.67255 5.68662 1.62739 5.54943C1.58223 5.41225 1.61491 5.26137 1.71279 5.15518L3.82661 2.75257C3.92101 2.64528 4.05697 2.58374 4.19989 2.5836Z"/>\
                                                        <mask id="mask0_22_153" style="mask-type:alpha" maskUnits="userSpaceOnUse" x="1" y="2" width="6" height="4">\
                                                        <path d="M4.19989 2.5836C4.34249 2.58343 4.47827 2.64468 4.57252 2.75171L6.68698 5.15475C6.78486 5.26094 6.81754 5.41182 6.77238 5.549C6.72722 5.68618 6.6113 5.78814 6.46947 5.81542C6.32765 5.84271 6.18218 5.79103 6.08934 5.6804L4.2404 3.57909C4.23017 3.56742 4.21541 3.56072 4.19989 3.56072C4.18436 3.56072 4.1696 3.56742 4.15937 3.57909L2.31043 5.68083C2.21759 5.79146 2.07212 5.84314 1.9303 5.81586C1.78847 5.78857 1.67255 5.68662 1.62739 5.54943C1.58223 5.41225 1.61491 5.26137 1.71279 5.15518L3.82661 2.75257C3.92101 2.64528 4.05697 2.58374 4.19989 2.5836Z" fill="white"/>\
                                                        </mask>\
                                                        <g mask="url(#mask0_22_153)">\
                                                        </g>\
                                                    </svg>'
                

                easychat_popup_maximize_tooltip = document.createElement("span");
                easychat_popup_maximize_tooltip.id = "allincall-maximize-popup-tooltip";
                easychat_popup_maximize_tooltip.textContent = MAXIMIZE_TEXT;;
                easychat_popup_maximize_tooltip.style.fontFamily = prompt_text_font_family;
                easychat_popup_maximize_tooltip.style.visibiity = "hidden";
                easychat_popup_maximize_tooltip.style.backgroundColor = bot_theme_light_color;

            } else {
                easychat_popup_min_image = "None"
            }

            response = JSON.parse(this.responseText);

            if (BOT_POSITION.indexOf("right") != -1) {
                easychat_popup_image.style.right = "20px";
                if (is_minimization_enabled) {
                    easychat_popup_min_image.style.right = "20px";
                }
                if (BOT_POSITION.indexOf("top") != -1) {
                    easychat_popup_image.style.top = "0px";

                    if (is_minimization_enabled) {
                        easychat_popup_min_image.style.top = "0em";

                        easychat_popup_minimize.style.top = "20px";
                        easychat_popup_minimize_tooltip.style.bottom = "unset";
                        easychat_popup_minimize_tooltip.style.top = "40px";
                        easychat_popup_minimize_tooltip.style.right = "158px";

                        easychat_popup_maximize.style.top = "5px";
                        easychat_popup_maximize_tooltip.style.bottom = "unset";

                        easychat_popup_maximize_tooltip.style.top = "22px";
                        easychat_popup_maximize_tooltip.style.right = "87px";
                    }
                } else {
                    if (is_minimization_enabled) {
                        easychat_popup_min_image.style.bottom = "1em";

                        easychat_popup_maximize.style.bottom = "60px";
                        easychat_popup_minimize_tooltip.style.right = "154px";
                        easychat_popup_minimize_tooltip.style.bottom = "107px";
                        easychat_popup_maximize_tooltip.style.right = "83px";
                        easychat_popup_maximize_tooltip.style.bottom = "68px";
                    }
                }
            } else {
                easychat_popup_image.style.left = "20px";
                if (is_minimization_enabled) {
                    easychat_popup_min_image.style.left = "20px";

                    easychat_popup_minimize.style.left = "150px";
                    easychat_popup_minimize_tooltip.style.left = "175px";

                    easychat_popup_maximize.style.left = "65px";
                    easychat_popup_maximize_tooltip.style.left = "85px";

                    easychat_popup_minimize_tooltip.style.right = "unset";
                    easychat_popup_maximize_tooltip.style.right = "unset";
                }
                if (BOT_POSITION.indexOf("top") != -1) {
                    easychat_popup_image.style.top = "0px";
                    if (is_minimization_enabled) {
                        easychat_popup_min_image.style.top = "0em";

                        easychat_popup_minimize.style.top = "20px";

                        easychat_popup_minimize_tooltip.style.top = "45px";
                        easychat_popup_minimize_tooltip.style.bottom = "unset";

                        easychat_popup_maximize.style.top = "5px";
                        easychat_popup_maximize_tooltip.style.top = "22px";
                        easychat_popup_maximize_tooltip.style.bottom = "unset";
                    }
                } else {
                    if (is_minimization_enabled) {
                        easychat_popup_min_image.style.bottom = "1em";

                        easychat_popup_maximize.style.bottom = "60px";
                        easychat_popup_maximize_tooltip.style.bottom = "68px";
                    }
                }
            }

            window.form_assist_autopop_up_timer = response.form_assist_autopop_up_timer;
            window.form_assist_inactivity_timer = response.form_assist_inactivity_timer;
            window.is_auto_pop_allowed = response.is_auto_pop_allowed;
            window.is_auto_pop_allowed_mobile = response.is_auto_pop_allowed_mobile;
            window.is_auto_pop_allowed_desktop = response.is_auto_pop_allowed_desktop;
            window.is_auto_popup_inactivity_enabled = response.is_auto_popup_inactivity_enabled;
            window.auto_popup_type = response.auto_popup_type;
            window.auto_pop_up_timer = response.auto_pop_timer
            window.auto_pop_up_text = response.auto_pop_text
            window.is_form_assist_auto_pop_allowed = response.is_form_assist_auto_pop_allowed
            window.is_nps_required = response.is_nps_required
            window.form_assist_auto_popup_type = response.form_assist_auto_popup_type;
            window.form_assist_intent_bubble_timer = response.form_assist_intent_bubble_timer;
            window.form_assist_intent_bubble_inactivity_timer = response.form_assist_intent_bubble_inactivity_timer;
            window.form_assist_intent_bubble_type = response.form_assist_intent_bubble_type;
            window.form_assist_auto_pop_text = response.form_assist_auto_pop_text;
            window.form_assist_intent_bubble = JSON.parse(response.form_assist_intent_bubble);
            window.form_assist_tag_timer = JSON.parse(response.form_assist_tag_timer);
            window.voice_based_form_assist_enabled = response.is_voice_based_form_assist_enabled;
            window.form_assist_intent_responses_dict = JSON.parse(response.form_assist_intent_responses_dict);
            window.enable_response_form_assist = response.enable_response_form_assist
            window.form_assist_tag_intents = JSON.parse(response.form_assist_tag_intents)
            window.form_assist_tag_mapping = JSON.parse(response.form_assist_tag_mapping)
            window.localStorage['autocorrect_bot_replace'] = JSON.stringify(response['autocorrect_bot_replace'])

        // changed code

            if (response.status == 200 && response.bot_image_url != "") {
                easychat_popup_image.src = SERVER_URL + response.bot_image_url;
                if (is_minimization_enabled) {
                    easychat_popup_min_image.src = SERVER_URL + response.bot_image_url;
                }

            } else {
                easychat_popup_image.src = SERVER_URL + "/static/EasyChatApp/img/popup-4.gif";
                if (is_minimization_enabled) {
                    easychat_popup_min_image.src = SERVER_URL + "/static/EasyChatApp/img/popup-4.gif";
                }
            }

             var popup_id_and_classes = get_popup_id_and_classes(BOT_POSITION)
             var id_popup_wrapper = popup_id_and_classes[0]
             var class_popup_wrapper = popup_id_and_classes[1]
             var class_pop_up_image_wrapper = popup_id_and_classes[2]
             var class_greeting_notification_wrapper = popup_id_and_classes[3]


        if(auto_popup_type == "2" && !is_form_assist_auto_pop_allowed){

            popup_enabled = true
            wrapper_html = '<div id="' + id_popup_wrapper + '" class="' + class_popup_wrapper + '"><div class="' + class_pop_up_image_wrapper + '"><div class="' + class_greeting_notification_wrapper + '">'  

             notification_message_div = '<div class="notification-message-div" style="display:none;" id="notification-message-div">\
                <div class="notification-message-hide-div" onclick="hide_auto_pop_up_notification_text()">\
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\
                        <circle cx="12" cy="12" r="11.5" fill="white" stroke="#' + bot_theme_color + '"></circle>\
                        <path d="M16.1839 17L12.5029 13.3156L8.82186 17L8 16.1787L11.6868 12.5L8 8.82134L8.82186 8L12.5029 11.6844L16.1839 8.00578L17 8.82134L13.319 12.5L17 16.1787L16.1839 17Z" fill="#' + bot_theme_color + '"></path>\
                    </svg></div>\
                <div class="allincall-notification-message" onclick="open_up_bot_by_greeting()" style="border: 1px solid #' + bot_theme_color + ';">\
                <span> <svg width="28" height="26" viewBox="0 0 28 26" fill="none" xmlns="http://www.w3.org/2000/svg">\
                <path d="M10.8896 17.2108L6.68998 11.8405C6.68998 11.8405 5.86993 10.2885 8.0351 10.1679C8.0351 10.1679 7.07822 8.44705 9.41351 7.95764C9.41351 7.95764 8.39557 6.90729 9.47268 6.15549C10.5498 5.40368 11.3032 6.66714 11.3032 6.66714C11.3032 6.66714 12.6303 4.65722 13.7123 6.04074C14.7942 7.42426 17.3097 10.5104 17.3097 10.5104C17.3097 10.5104 17.5153 7.53379 18.9477 7.22838C20.0809 6.98676 20.3276 7.73942 20.3276 7.73942C20.3276 7.73942 20.6095 10.3757 20.8806 11.4605C21.2576 12.9685 21.2556 14.5389 20.7254 15.5043L22.647 17.9617L16.7544 21.3638L15.0816 19.0005C15.0818 19.0005 12.7019 19.5282 10.8896 17.2108Z" fill="#FFD3B4"></path>\
                <path d="M17.8963 6.8808C17.1904 7.08995 16.6113 7.65362 16.4551 8.28353L16.1311 9.59087L12.8952 5.56503C12.6927 5.30703 12.3692 5.1574 11.9843 5.14364C11.5986 5.12984 11.1972 5.2541 10.8542 5.49353C10.6405 5.64271 10.4701 5.82326 10.3474 6.01718C9.8672 5.46932 8.94834 5.4056 8.26151 5.88506C7.90833 6.1316 7.67143 6.47887 7.59459 6.86288C7.52658 7.20259 7.59313 7.53503 7.78187 7.80679C7.54522 7.86184 7.31348 7.96496 7.10368 8.11143C6.76065 8.35084 6.51703 8.67677 6.41767 9.02913C6.3389 9.30844 6.35864 9.57767 6.47085 9.80635C6.22741 9.8605 5.98852 9.96566 5.77264 10.1163C5.43019 10.3553 5.18626 10.6803 5.08584 11.0312C4.98511 11.3833 5.0407 11.7191 5.24235 11.977L9.81505 17.8243C10.6978 18.9532 12.1727 19.5466 13.8853 19.4695L15.3883 21.6038C15.492 21.751 15.727 21.7759 15.9264 21.6608L21.819 18.2587C21.927 18.1964 22.0091 18.1011 22.0449 17.9967C22.0807 17.8923 22.0667 17.7886 22.0065 17.7116L20.1866 15.3844C20.4727 14.6697 21.1083 12.9046 20.2883 11.2934L19.7904 7.80573C19.7361 7.42552 19.5089 7.11981 19.1507 6.9449C18.7926 6.76999 18.3471 6.74725 17.8963 6.8808ZM18.963 8.04675L19.4676 11.5814C19.4722 11.6132 19.4818 11.6433 19.4964 11.6709C20.2728 13.1475 19.5867 14.8345 19.3612 15.3889L19.3361 15.4508C19.2916 15.5612 19.3031 15.6733 19.3673 15.7552L21.0525 17.9103L15.9379 20.8632L14.5197 18.8493C14.456 18.7587 14.339 18.7111 14.2056 18.7214C12.659 18.8402 11.3203 18.3307 10.5326 17.3235L5.95993 11.4762C5.87205 11.3638 5.8479 11.217 5.89201 11.0629C5.93639 10.9078 6.04444 10.764 6.19621 10.6581C6.34818 10.5521 6.52523 10.4968 6.69515 10.5023C6.86398 10.5078 7.00542 10.5727 7.0933 10.685L9.74996 14.0822C9.87267 14.2391 10.1677 14.2621 10.3765 14.1118C10.5672 13.9745 10.6303 13.741 10.5165 13.5955L7.29516 9.47616C7.20586 9.36194 7.18078 9.21345 7.2246 9.05797C7.26844 8.90253 7.37592 8.75874 7.52727 8.65312C7.67849 8.54754 7.85561 8.49268 8.02576 8.49876C8.19591 8.50485 8.33883 8.57109 8.42813 8.68531L11.6495 12.8047C11.7713 12.9604 12.0325 12.9554 12.2327 12.8155C12.4324 12.676 12.513 12.4416 12.3918 12.2865L8.54056 7.36173C8.42201 7.21013 8.37731 7.02382 8.41469 6.83706C8.44799 6.67097 8.54398 6.52524 8.68514 6.42673C8.99728 6.20882 9.4409 6.27335 9.67364 6.5709L13.5249 11.4957C13.6464 11.651 13.9075 11.6466 14.1074 11.5071C14.3075 11.3674 14.3887 11.133 14.2672 10.9776L11.0457 6.85827C10.8613 6.62248 10.9655 6.25327 11.2779 6.03523C11.4293 5.92957 11.6062 5.87477 11.7764 5.88085C11.9465 5.88693 12.0895 5.95318 12.1788 6.0674L12.181 6.07025L15.8671 10.6562L15.7576 11.0978C15.4527 11.3918 14.6874 12.2258 14.5502 13.3047C14.5245 13.5074 14.689 13.6551 14.9176 13.6346C15.1462 13.6141 15.3525 13.4332 15.3783 13.2304C15.5058 12.2274 16.3781 11.4707 16.3855 11.4643C16.4638 11.3983 16.5185 11.3144 16.5401 11.2274L17.2682 8.28957C17.3475 7.96948 17.6418 7.68302 18.0006 7.57674C18.2296 7.50885 18.456 7.52045 18.638 7.60933C18.82 7.69819 18.9354 7.85357 18.963 8.04675Z" fill="black"></path>\
                <path d="M19.842 3.30215C20.0513 3.18129 20.1445 2.95077 20.0501 2.78727C19.9557 2.62378 19.7095 2.58923 19.5002 2.7101C19.2908 2.83097 19.1976 3.06149 19.292 3.22498C19.3864 3.38847 19.6326 3.42302 19.842 3.30215Z" fill="black"></path>\
                <path d="M14.2341 5.11155C14.2492 5.10001 15.7715 3.95113 17.8577 3.52672C18.0976 3.47788 18.2876 3.25713 18.2646 3.05513C18.244 2.87405 18.0565 2.76504 17.842 2.80864C15.5149 3.28213 13.8422 4.54435 13.7722 4.59783C13.5806 4.74408 13.5288 4.9776 13.6564 5.11947C13.784 5.26134 14.0426 5.25769 14.2341 5.11155Z" fill="black"></path>\
                <path d="M15.3205 5.2931C15.1184 5.42546 15.0433 5.65761 15.152 5.81233C15.2608 5.96707 15.5132 5.9857 15.7159 5.85382C15.7358 5.841 17.7198 4.57136 19.9704 4.80634C20.201 4.83039 20.455 4.65935 20.5096 4.44422C20.557 4.25715 20.4367 4.09407 20.2365 4.07319C17.6329 3.80134 15.4137 5.23209 15.3205 5.2931Z" fill="black"></path>\
                <path d="M5.53285 14.7613C5.66201 14.5728 5.61311 14.3581 5.42338 14.2814C5.23337 14.2046 4.97403 14.2954 4.84429 14.484C4.80817 14.5365 3.95937 15.7869 3.90517 17.3235C3.89866 17.5078 4.05843 17.6399 4.26837 17.6241C4.50946 17.6059 4.73067 17.4008 4.73814 17.1897C4.78459 15.873 5.52539 14.7723 5.53285 14.7613Z" fill="black"></path>\
                <path d="M5.89352 16.0002C5.87206 16.0523 5.37051 17.2913 5.59341 18.5169C5.62661 18.6995 5.83239 18.7977 6.0518 18.7352C6.28372 18.6691 6.45236 18.4472 6.41726 18.2542C6.22897 17.2189 6.66503 16.1289 6.67124 16.1137C6.75364 15.9126 6.64679 15.7242 6.4323 15.6927C6.21749 15.6613 5.97627 15.7989 5.89352 16.0002Z" fill="black"></path>\
            </svg></span><span style="white-space: break-spaces;position: relative;top: -6px;font-family:' + prompt_text_font_family + '"> '+ auto_pop_up_text+'</span></div></div>'    
                notification_counter='<div class="allincall-notification-div" onclick="open_up_bot()" style="display:none;" id="allincall-notification-count">1</div>' 
                notification_message_div_element = document.createElement("div");
                notification_message_div_element.setAttribute("easyassist_avoid_sync", "true")
                notification_message_div_element.innerHTML += wrapper_html + notification_message_div + '</div></div></div>';               
                notification_counter_element = document.createElement("div");
                notification_counter_element.innerHTML += notification_counter;

                document.body.appendChild( notification_message_div_element)   
                var easychat_popup_image_div = ''
                  if (is_minimization_enabled) 
                {

                    easychat_popup_image_div += easychat_popup_image.outerHTML + easychat_popup_min_image.outerHTML +
                                                          easychat_popup_minimize.outerHTML + easychat_popup_maximize.outerHTML

                    document.getElementsByClassName(class_pop_up_image_wrapper)[0].appendChild(notification_counter_element)
                    document.getElementsByClassName(class_pop_up_image_wrapper)[0].innerHTML += easychat_popup_image_div

                    document.getElementById("allincall-minimize-popup").appendChild(easychat_popup_minimize_tooltip)
                    document.getElementById("allincall-maximize-popup").appendChild(easychat_popup_maximize_tooltip)
                } else {
                    easychat_popup_image_div += easychat_popup_image.outerHTML

                    document.getElementsByClassName(class_pop_up_image_wrapper)[0].appendChild(notification_counter_element)
                    document.getElementsByClassName(class_pop_up_image_wrapper)[0].innerHTML += easychat_popup_image_div

                }         
            }
            else if(auto_popup_type == "3" && !is_form_assist_auto_pop_allowed){

             popup_enabled = true
             wrapper_html = '<div id="' + id_popup_wrapper + '" class="' + class_popup_wrapper + '">'  

             notification_message_div = '<div class="notification-message-div notification-message-div-intent-bubble" style="display:none;" id="notification-message-div">\
                <div class="notification-message-hide-div notification-message-hide-div-intent-bubble" onclick="hide_auto_pop_up_notification_text()">\
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\
                        <circle cx="12" cy="12" r="11.5" fill="white" stroke="#' + bot_theme_color + '"></circle>\
                        <path d="M16.1839 17L12.5029 13.3156L8.82186 17L8 16.1787L11.6868 12.5L8 8.82134L8.82186 8L12.5029 11.6844L16.1839 8.00578L17 8.82134L13.319 12.5L17 16.1787L16.1839 17Z" fill="#' + bot_theme_color + '"></path>\
                    </svg></div>\
                <div class="notification-message-intent-bubble" onclick="open_up_bot_by_greeting()" style="border: 1px solid #' + bot_theme_color + ';">\
                <span style="white-space: break-spaces;position: relative;top: 4px;width:88%;font-family:' + prompt_text_font_family + '">'+ auto_pop_up_text+'</span></div>\
                <div class="notification-intent-message-bubble-container">'
            for(i=0;i<initial_trigger_intents.length;i++){
                notification_message_div+= '<div class="notification-intent-message-bubble" style="border-radius:4px;background:#' + bot_theme_color + ';font-size: 14px;padding: 4px 14px 5px 14px;margin-bottom:4px;color: #FFF;text-align: center;line-height: 25px;width:max-content;transform-origin: 100% 0;transition: 0.3s ease;font-weight: 600;font-family:' + prompt_text_font_family + '; direction: ltr;" onclick="open_greeting_intents(this)">'+initial_trigger_intents[i]+'</div>'
            }
                notification_message_div += '</div></div>'
                notification_message_div_element = document.createElement("div");
                notification_message_div_element.setAttribute("easyassist_avoid_sync", "true")
                easychat_popup_image_div = document.createElement('div')
                easychat_popup_image_div.className = class_pop_up_image_wrapper

                if (is_minimization_enabled) {

                    easychat_popup_image_div.innerHTML += easychat_popup_image.outerHTML + easychat_popup_min_image.outerHTML +
                                                           easychat_popup_minimize.outerHTML + easychat_popup_maximize.outerHTML

                    notification_message_div_element.innerHTML += wrapper_html + notification_message_div + '</div>';
                    document.body.appendChild( notification_message_div_element)
                    document.getElementById(id_popup_wrapper).appendChild(easychat_popup_image_div)

                    document.getElementById("allincall-minimize-popup").appendChild(easychat_popup_minimize_tooltip)
                    document.getElementById("allincall-maximize-popup").appendChild(easychat_popup_maximize_tooltip)

                } else {
                    easychat_popup_image_div.innerHTML += easychat_popup_image.outerHTML

                    notification_message_div_element.innerHTML += wrapper_html + notification_message_div + '</div>';
                    document.body.appendChild( notification_message_div_element)
                    document.getElementById(id_popup_wrapper).appendChild(easychat_popup_image_div)
                }
            }
            else if(is_form_assist_auto_pop_allowed && form_assist_intent_bubble_type == "1") {

             popup_enabled = true
             wrapper_html = '<div id="' + id_popup_wrapper + '" class="' + class_popup_wrapper + '"><div class="' + class_pop_up_image_wrapper + '"><div class="' + class_greeting_notification_wrapper + '">' 
             
             notification_message_div = '<div class="notification-message-div" style="display:none;" id="notification-message-div">\
                <div class="notification-message-hide-div" onclick="hide_auto_pop_up_notification_text()">\
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\
                        <circle cx="12" cy="12" r="11.5" fill="white" stroke="#' + bot_theme_color + '"></circle>\
                        <path d="M16.1839 17L12.5029 13.3156L8.82186 17L8 16.1787L11.6868 12.5L8 8.82134L8.82186 8L12.5029 11.6844L16.1839 8.00578L17 8.82134L13.319 12.5L17 16.1787L16.1839 17Z" fill="#' + bot_theme_color + '"></path>\
                    </svg></div>\
                <div class="allincall-notification-message" onclick="open_up_bot_by_greeting()" style="border: 1px solid #' + bot_theme_color + ';">\
                <span> <svg width="28" height="26" viewBox="0 0 28 26" fill="none" xmlns="http://www.w3.org/2000/svg">\
                <path d="M10.8896 17.2108L6.68998 11.8405C6.68998 11.8405 5.86993 10.2885 8.0351 10.1679C8.0351 10.1679 7.07822 8.44705 9.41351 7.95764C9.41351 7.95764 8.39557 6.90729 9.47268 6.15549C10.5498 5.40368 11.3032 6.66714 11.3032 6.66714C11.3032 6.66714 12.6303 4.65722 13.7123 6.04074C14.7942 7.42426 17.3097 10.5104 17.3097 10.5104C17.3097 10.5104 17.5153 7.53379 18.9477 7.22838C20.0809 6.98676 20.3276 7.73942 20.3276 7.73942C20.3276 7.73942 20.6095 10.3757 20.8806 11.4605C21.2576 12.9685 21.2556 14.5389 20.7254 15.5043L22.647 17.9617L16.7544 21.3638L15.0816 19.0005C15.0818 19.0005 12.7019 19.5282 10.8896 17.2108Z" fill="#FFD3B4"></path>\
                <path d="M17.8963 6.8808C17.1904 7.08995 16.6113 7.65362 16.4551 8.28353L16.1311 9.59087L12.8952 5.56503C12.6927 5.30703 12.3692 5.1574 11.9843 5.14364C11.5986 5.12984 11.1972 5.2541 10.8542 5.49353C10.6405 5.64271 10.4701 5.82326 10.3474 6.01718C9.8672 5.46932 8.94834 5.4056 8.26151 5.88506C7.90833 6.1316 7.67143 6.47887 7.59459 6.86288C7.52658 7.20259 7.59313 7.53503 7.78187 7.80679C7.54522 7.86184 7.31348 7.96496 7.10368 8.11143C6.76065 8.35084 6.51703 8.67677 6.41767 9.02913C6.3389 9.30844 6.35864 9.57767 6.47085 9.80635C6.22741 9.8605 5.98852 9.96566 5.77264 10.1163C5.43019 10.3553 5.18626 10.6803 5.08584 11.0312C4.98511 11.3833 5.0407 11.7191 5.24235 11.977L9.81505 17.8243C10.6978 18.9532 12.1727 19.5466 13.8853 19.4695L15.3883 21.6038C15.492 21.751 15.727 21.7759 15.9264 21.6608L21.819 18.2587C21.927 18.1964 22.0091 18.1011 22.0449 17.9967C22.0807 17.8923 22.0667 17.7886 22.0065 17.7116L20.1866 15.3844C20.4727 14.6697 21.1083 12.9046 20.2883 11.2934L19.7904 7.80573C19.7361 7.42552 19.5089 7.11981 19.1507 6.9449C18.7926 6.76999 18.3471 6.74725 17.8963 6.8808ZM18.963 8.04675L19.4676 11.5814C19.4722 11.6132 19.4818 11.6433 19.4964 11.6709C20.2728 13.1475 19.5867 14.8345 19.3612 15.3889L19.3361 15.4508C19.2916 15.5612 19.3031 15.6733 19.3673 15.7552L21.0525 17.9103L15.9379 20.8632L14.5197 18.8493C14.456 18.7587 14.339 18.7111 14.2056 18.7214C12.659 18.8402 11.3203 18.3307 10.5326 17.3235L5.95993 11.4762C5.87205 11.3638 5.8479 11.217 5.89201 11.0629C5.93639 10.9078 6.04444 10.764 6.19621 10.6581C6.34818 10.5521 6.52523 10.4968 6.69515 10.5023C6.86398 10.5078 7.00542 10.5727 7.0933 10.685L9.74996 14.0822C9.87267 14.2391 10.1677 14.2621 10.3765 14.1118C10.5672 13.9745 10.6303 13.741 10.5165 13.5955L7.29516 9.47616C7.20586 9.36194 7.18078 9.21345 7.2246 9.05797C7.26844 8.90253 7.37592 8.75874 7.52727 8.65312C7.67849 8.54754 7.85561 8.49268 8.02576 8.49876C8.19591 8.50485 8.33883 8.57109 8.42813 8.68531L11.6495 12.8047C11.7713 12.9604 12.0325 12.9554 12.2327 12.8155C12.4324 12.676 12.513 12.4416 12.3918 12.2865L8.54056 7.36173C8.42201 7.21013 8.37731 7.02382 8.41469 6.83706C8.44799 6.67097 8.54398 6.52524 8.68514 6.42673C8.99728 6.20882 9.4409 6.27335 9.67364 6.5709L13.5249 11.4957C13.6464 11.651 13.9075 11.6466 14.1074 11.5071C14.3075 11.3674 14.3887 11.133 14.2672 10.9776L11.0457 6.85827C10.8613 6.62248 10.9655 6.25327 11.2779 6.03523C11.4293 5.92957 11.6062 5.87477 11.7764 5.88085C11.9465 5.88693 12.0895 5.95318 12.1788 6.0674L12.181 6.07025L15.8671 10.6562L15.7576 11.0978C15.4527 11.3918 14.6874 12.2258 14.5502 13.3047C14.5245 13.5074 14.689 13.6551 14.9176 13.6346C15.1462 13.6141 15.3525 13.4332 15.3783 13.2304C15.5058 12.2274 16.3781 11.4707 16.3855 11.4643C16.4638 11.3983 16.5185 11.3144 16.5401 11.2274L17.2682 8.28957C17.3475 7.96948 17.6418 7.68302 18.0006 7.57674C18.2296 7.50885 18.456 7.52045 18.638 7.60933C18.82 7.69819 18.9354 7.85357 18.963 8.04675Z" fill="black"></path>\
                <path d="M19.842 3.30215C20.0513 3.18129 20.1445 2.95077 20.0501 2.78727C19.9557 2.62378 19.7095 2.58923 19.5002 2.7101C19.2908 2.83097 19.1976 3.06149 19.292 3.22498C19.3864 3.38847 19.6326 3.42302 19.842 3.30215Z" fill="black"></path>\
                <path d="M14.2341 5.11155C14.2492 5.10001 15.7715 3.95113 17.8577 3.52672C18.0976 3.47788 18.2876 3.25713 18.2646 3.05513C18.244 2.87405 18.0565 2.76504 17.842 2.80864C15.5149 3.28213 13.8422 4.54435 13.7722 4.59783C13.5806 4.74408 13.5288 4.9776 13.6564 5.11947C13.784 5.26134 14.0426 5.25769 14.2341 5.11155Z" fill="black"></path>\
                <path d="M15.3205 5.2931C15.1184 5.42546 15.0433 5.65761 15.152 5.81233C15.2608 5.96707 15.5132 5.9857 15.7159 5.85382C15.7358 5.841 17.7198 4.57136 19.9704 4.80634C20.201 4.83039 20.455 4.65935 20.5096 4.44422C20.557 4.25715 20.4367 4.09407 20.2365 4.07319C17.6329 3.80134 15.4137 5.23209 15.3205 5.2931Z" fill="black"></path>\
                <path d="M5.53285 14.7613C5.66201 14.5728 5.61311 14.3581 5.42338 14.2814C5.23337 14.2046 4.97403 14.2954 4.84429 14.484C4.80817 14.5365 3.95937 15.7869 3.90517 17.3235C3.89866 17.5078 4.05843 17.6399 4.26837 17.6241C4.50946 17.6059 4.73067 17.4008 4.73814 17.1897C4.78459 15.873 5.52539 14.7723 5.53285 14.7613Z" fill="black"></path>\
                <path d="M5.89352 16.0002C5.87206 16.0523 5.37051 17.2913 5.59341 18.5169C5.62661 18.6995 5.83239 18.7977 6.0518 18.7352C6.28372 18.6691 6.45236 18.4472 6.41726 18.2542C6.22897 17.2189 6.66503 16.1289 6.67124 16.1137C6.75364 15.9126 6.64679 15.7242 6.4323 15.6927C6.21749 15.6613 5.97627 15.7989 5.89352 16.0002Z" fill="black"></path>\
                </svg></span><span  id="form-assist-pop-up-text-for-type-1" style="white-space: break-spaces;position: relative;top: -6px;font-family:' + prompt_text_font_family + '"> '+ form_assist_auto_pop_text +'</span></div></div>'
                notification_counter='<div class="allincall-notification-div" onclick="open_up_bot()" style="display:none;" id="allincall-notification-count">1</div>'
                notification_message_div_element = document.createElement("div");
                notification_message_div_element.setAttribute("easyassist_avoid_sync", "true")
                notification_message_div_element.innerHTML += wrapper_html + notification_message_div + '</div></div></div>';               
                notification_counter_element = document.createElement("div");
                notification_counter_element.innerHTML += notification_counter;
                
                document.body.appendChild( notification_message_div_element) 

                 var easychat_popup_image_div = ''
                  if (is_minimization_enabled) 
                {

                    easychat_popup_image_div += easychat_popup_image.outerHTML + easychat_popup_min_image.outerHTML +
                                                          easychat_popup_minimize.outerHTML + easychat_popup_maximize.outerHTML

                    document.getElementsByClassName(class_pop_up_image_wrapper)[0].appendChild(notification_counter_element)
                    document.getElementsByClassName(class_pop_up_image_wrapper)[0].innerHTML += easychat_popup_image_div

                    document.getElementById("allincall-minimize-popup").appendChild(easychat_popup_minimize_tooltip)
                    document.getElementById("allincall-maximize-popup").appendChild(easychat_popup_maximize_tooltip)
                } else {
                    easychat_popup_image_div += easychat_popup_image.outerHTML

                    document.getElementsByClassName(class_pop_up_image_wrapper)[0].appendChild(notification_counter_element)
                    document.getElementsByClassName(class_pop_up_image_wrapper)[0].innerHTML += easychat_popup_image_div

                }             
            }
            else if(is_form_assist_auto_pop_allowed && form_assist_intent_bubble_type == "2") {

             popup_enabled = true
             wrapper_html = '<div id="' + id_popup_wrapper + '" class="' + class_popup_wrapper + '">'  

             notification_message_div = '<div class="notification-message-div notification-message-div-intent-bubble" style="display:none;" id="notification-message-div">\
                <div class="notification-message-hide-div notification-message-hide-div-intent-bubble" onclick="hide_auto_pop_up_notification_text()">\
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\
                        <circle cx="12" cy="12" r="11.5" fill="white" stroke="#' + bot_theme_color + '"></circle>\
                        <path d="M16.1839 17L12.5029 13.3156L8.82186 17L8 16.1787L11.6868 12.5L8 8.82134L8.82186 8L12.5029 11.6844L16.1839 8.00578L17 8.82134L13.319 12.5L17 16.1787L16.1839 17Z" fill="#' + bot_theme_color + '"></path>\
                    </svg></div>\
                <div class="notification-message-intent-bubble" id="intent-bubble-greeting-message" onclick="open_up_bot_by_greeting()" style="border: 1px solid #' + bot_theme_color + ';">\
                <span style="white-space: break-spaces;position: relative;top: 4px;width:88%;font-family:' + prompt_text_font_family + '">'+ form_assist_auto_pop_text +'</span></div>\
                <div style="direction: rtl;">'
            for (var intent_pk in form_assist_intent_bubble) {
                notification_message_div+= '<div class="notification-intent-message-bubble form-assist-intent-bubble" id="' + intent_pk + '" style="border-radius:4px;background:#' + bot_theme_color + ';font-size: 14px;padding: 4px 14px 5px 14px;margin-bottom:4px;color: #FFF;text-align: center;line-height: 25px;width:max-content;transform-origin: 100% 0;transition: 0.3s ease;font-weight: 600;font-family:' + prompt_text_font_family + ';direction: ltr;" onclick="open_form_assist_greeting_intent(this)">' + form_assist_intent_bubble[intent_pk] + '</div>'
            }
            for (var intent_pk in form_assist_tag_intents){
                if(intent_pk in form_assist_intent_bubble) continue;
                notification_message_div+= '<div class="notification-intent-message-bubble form-assist-intent-bubble" id="' + intent_pk + '" style="border-radius:4px;background:#' + bot_theme_color + ';font-size: 14px;padding: 4px 14px 5px 14px;margin-bottom:4px;color: #FFF;text-align: center;line-height: 25px;width:max-content;transform-origin: 100% 0;transition: 0.3s ease;font-weight: 600;font-family:' + prompt_text_font_family + ';direction: ltr;" onclick="open_form_assist_greeting_intent(this)">' + form_assist_tag_intents[intent_pk] + '</div>'
            }
                notification_message_div += '</div></div>'
                notification_message_div_element = document.createElement("div");
                notification_message_div_element.setAttribute("easyassist_avoid_sync", "true")
                easychat_popup_image_div = document.createElement('div')
                easychat_popup_image_div.className = class_pop_up_image_wrapper

                if (is_minimization_enabled) {

                    easychat_popup_image_div.innerHTML += easychat_popup_image.outerHTML + easychat_popup_min_image.outerHTML +
                                                           easychat_popup_minimize.outerHTML + easychat_popup_maximize.outerHTML

                     notification_message_div_element.innerHTML += wrapper_html + notification_message_div + '</div>';
                    document.body.appendChild( notification_message_div_element)
                    document.getElementById(id_popup_wrapper).appendChild(easychat_popup_image_div)

                    document.getElementById("allincall-minimize-popup").appendChild(easychat_popup_minimize_tooltip)
                    document.getElementById("allincall-maximize-popup").appendChild(easychat_popup_maximize_tooltip)

                } else {
                    easychat_popup_image_div.innerHTML += easychat_popup_image.outerHTML

                    notification_message_div_element.innerHTML += wrapper_html + notification_message_div + '</div>';
                    document.body.appendChild( notification_message_div_element)
                    document.getElementById(id_popup_wrapper).appendChild(easychat_popup_image_div)
                }                          
            }

            notification_counter='<div class="new-notification-div" style="display:none;" onclick="open_up_bot()" id="new-notification-div">\
                                    <svg width="53" height="53" viewBox="0 0 53 53" fill="none" xmlns="http://www.w3.org/2000/svg">\
                                    <path d="M6.23139 48.0527C7.33445 46.1811 8.68728 43.7736 9.91886 41.4867L10.0507 41.2415L9.83274 41.0693C4.78184 37.079 2 31.6803 2 25.8689C2 14.3619 13.1446 5.00013 26.8438 5.00013C40.5429 5.00013 51.6875 14.3619 51.6875 25.8689C51.6875 37.3758 40.5429 46.7376 26.8438 46.7376C23.8691 46.7376 20.9568 46.2984 18.1862 45.4332L18.0782 45.3994L17.9722 45.4391C13.7965 46.9861 9.46571 47.946 6.23139 48.0527Z" fill="#'+bot_theme_color+'"></path>\
                                    <text id="new-notification-count" x="22" y="30" font-family="Silka" font-size="15px" font-weight="700" fill="#fff">1</text>\
                                    </svg>\
                                    </div>'  

            notification_counter_element = document.createElement("div");
            notification_counter_element.innerHTML += notification_counter;

            // This is to colour the notification pseudo element to theme color
            const root = document.querySelector(":root");
            root.style.setProperty("--pseudo-bordercolor", "#" + bot_theme_color);

            if (is_form_assist == "true") {
                callFormAssist()
            }

            show_web_landing_intents(bot_theme_color, BOT_POSITION, easychat_popup_min_image);

            if (popup_enabled == false)
            {
                wrapper_html = '<div id="' + id_popup_wrapper + '" class="' + class_popup_wrapper + '"><div class="' + class_pop_up_image_wrapper + '">'  
                notification_message_div_element = document.createElement("div");
                notification_message_div_element.setAttribute("easyassist_avoid_sync", "true")
                notification_message_div_element.innerHTML += wrapper_html + '</div></div>';  
                document.body.appendChild(notification_message_div_element)              
                document.getElementsByClassName(class_pop_up_image_wrapper)[0].appendChild(easychat_popup_image);
            }

            document.getElementsByClassName(class_pop_up_image_wrapper)[0].appendChild(notification_counter_element)
            change_css_on_bot_maximization(BOT_POSITION)

            if (is_minimization_enabled) {
                if (popup_enabled == false) {
                    document.getElementsByClassName(class_pop_up_image_wrapper)[0].appendChild(easychat_popup_min_image);
                    document.getElementsByClassName(class_pop_up_image_wrapper)[0].appendChild(easychat_popup_minimize);
                    document.getElementById("allincall-minimize-popup").appendChild(easychat_popup_minimize_tooltip);
                    document.getElementsByClassName(class_pop_up_image_wrapper)[0].appendChild(easychat_popup_maximize);
                    document.getElementById("allincall-maximize-popup").appendChild(easychat_popup_maximize_tooltip);
                }

                document.getElementById("allincall-minimize-popup").addEventListener("click", function(e) {
                    document.getElementById("allincall-popup").style.display = "none";
                    document.getElementById("allincall-min-popup").style.display = "block";
                    document.getElementById("allincall-maximize-popup").style.display = "flex";
                    document.getElementById("allincall-minimize-popup").style.display = "none";
                    document.getElementById("allincall-maximize-popup-tooltip").style.visibility = "hidden";
                    document.getElementById("allincall-minimize-popup-tooltip").style.visibility = "hidden";

                    change_css_on_bot_minimization(BOT_POSITION);
                    if(window.disable_auto_popup_minimized){
                        let date = new Date();
                        date.setTime(date.getTime()+(24*60*60*1000));
                        easychat_set_cookie('is_bot_minimized', 'true', date.toGMTString(), "")
                        if(document.getElementById("allincall-notification-count")){
                            document.getElementById("allincall-notification-count").style.display = "none";
                        }
                        if(document.getElementById("notification-message-div")){
                            document.getElementById("notification-message-div").style.display = "none";
                        }
                    }
                });

                document.getElementById("allincall-minimize-popup").addEventListener("mouseover", function(e) {
                    document.getElementById("allincall-minimize-popup").style.backgroundColor = "#" + bot_theme_color;
                    document.getElementById("allincall-minimize-popup-tooltip").textContent = MINIMIZE_TEXT
                    document.getElementById("allincall-minimize-popup-tooltip").style.fontFamily = prompt_text_font_family;
                    document.getElementById("allincall-minimize-popup-tooltip").style.visibility = "unset";
                });

                document.getElementById("allincall-minimize-popup").addEventListener("mouseout", function(e) {
                    document.getElementById("allincall-minimize-popup").style.backgroundColor = "";
                    document.getElementById("allincall-minimize-popup-tooltip").style.visibility = "hidden";
                    document.getElementById("allincall-minimize-popup").style.fontColor = "black";

                });

                document.getElementById("allincall-maximize-popup").addEventListener("click", function(e) {
                    document.getElementById("allincall-popup").style.display = "block";
                    document.getElementById("allincall-min-popup").style.display = "none";
                    document.getElementById("allincall-maximize-popup").style.display = "none";
                    document.getElementById("allincall-minimize-popup").style.display = "";
                    document.getElementById("allincall-maximize-popup-tooltip").style.visibility = "hidden";
                    document.getElementById("allincall-minimize-popup-tooltip").style.visibility = "hidden";

                    change_css_on_bot_maximization(BOT_POSITION)
                    if(window.disable_auto_popup_minimized){
                        let date = new Date();
                        date.setTime(date.getTime()+(24*60*60*1000));
                        easychat_set_cookie('is_bot_minimized', 'false', date.toGMTString(), "");
                        check_auto_popup();
                        check_campaign_link();
                        check_welcome_banner_question();
                        show_web_landing_intents(bot_theme_color, BOT_POSITION, easychat_popup_min_image);
                        if (is_form_assist == "true") {
                            element_id = ''
                            resetTimer(e, true)
                        }
                    }
                });

                document.getElementById("allincall-maximize-popup").addEventListener("mouseover", function(e) {
                    document.getElementById("allincall-maximize-popup").style.backgroundColor = "#" + bot_theme_color;
                    document.getElementById("allincall-maximize-popup-tooltip").textContent = MAXIMIZE_TEXT
                    document.getElementById("allincall-maximize-popup-tooltip").style.fontFamily = prompt_text_font_family;
                    document.getElementById("allincall-maximize-popup-tooltip").style.visibility = "unset";
                });

                document.getElementById("allincall-maximize-popup").addEventListener("mouseout", function(e) {
                    document.getElementById("allincall-maximize-popup").style.backgroundColor = "";
                    document.getElementById("allincall-maximize-popup-tooltip").style.visibility = "hidden";
                    document.getElementById("allincall-maximize-popup").style.fontColor = "black";

                });
                if(window.disable_auto_popup_minimized && get_cookie('is_bot_minimized') == 'true'){
                    document.getElementById("allincall-popup").style.display = "none";
                    document.getElementById("allincall-min-popup").style.display = "block";
                    document.getElementById("allincall-maximize-popup").style.display = "flex";
                    document.getElementById("allincall-minimize-popup").style.display = "none";
                    document.getElementById("allincall-maximize-popup-tooltip").style.visibility = "hidden";
                    document.getElementById("allincall-minimize-popup-tooltip").style.visibility = "hidden";

                    change_css_on_bot_minimization(BOT_POSITION)
                } else {
                    document.getElementById("allincall-popup").style.display = "block";
                    document.getElementById("allincall-min-popup").style.display = "none";
                    document.getElementById("allincall-maximize-popup").style.display = "none";
                    document.getElementById("allincall-minimize-popup").style.display = "";
                    document.getElementById("allincall-maximize-popup-tooltip").style.visibility = "hidden";
                    document.getElementById("allincall-minimize-popup-tooltip").style.visibility = "hidden";

                    change_css_on_bot_maximization(BOT_POSITION)
                }
            }

            [document.getElementById("allincall-popup"), document.getElementById("allincall-min-popup")].forEach(function(element) {
                if (element == null) {
                    return;
                }
                
                element.addEventListener("click", function(e) {
                    if (auto_popup != null) {
                        clearTimeout(auto_popup)
                    }

                    if(easychat_minimized_chatbot == false){
                        save_bot_click_count();
                    }

                    document.getElementById("allincall-chat-box").contentWindow.postMessage({
                        event_id: 'is_chatbot_opened',
                        data: true,
                    }, "*")

                    if(document.getElementById("notification-message-div") !=null  && document.getElementById("notification-message-div")!= undefined ){
                        document.getElementById("notification-message-div").style.display ="none"
                         
                    }
                    if(document.getElementById("allincall-notification-count") !=null  && document.getElementById("allincall-notification-count")!= undefined ){
                        
                         document.getElementById("allincall-notification-count").style.display ="none"
                    }
                    
                    if(document.getElementById("new-notification-div") !=null  && document.getElementById("new-notification-div")!= undefined ){ 
                        document.getElementById("new-notification-div").style.display ="none"
                    }

                    try {
                        website_cookies = getCookies()
                        website_cookies = JSON.stringify(website_cookies)
                        website_cookies = encrypt_variable(website_cookies)
                        chat_bot_maximized = true
                        try {
                            document.getElementById("one-popup-on-bot").style.display = "none";
                            document.getElementById("chatbox-notification").style.display = "none";
                            document.getElementById("allincall-popup").style.zIndex = "99999999";
                            document.getElementById("cross-chatbox-notification").remove();

                        } catch (err) {}

                    } catch (err) { console.log(err) }

                    document.getElementById("allincall-chat-box").style.display = "block";
                    if (is_minimization_enabled) {
                        document.getElementById("allincall-minimize-popup").style.display = "none";
                        document.getElementById("allincall-maximize-popup").style.display = "none";
                        document.getElementById("allincall-min-popup").style.display = "none";
                    }
                    if (is_form_assist == 'true') {
                        easychat_do_not_disturb = is_form_assist_active()
                        if(window.form_assist_auto_popup_type == "1" || (window.form_assist_auto_popup_type == "2" && easychat_intent_name != "" && is_initial_trigger_intent)) {
                            easychat_form_assist_id = get_form_assist_id();
                        }
                        if(easychat_form_assist_id != "" && window.voice_based_form_assist_enabled) {
                            is_voice_based_form_assist_enabled = true;
                        }
                        console.log("Do not Disturb: " + easychat_do_not_disturb)
                        if (easychat_do_not_disturb == true && easychat_form_assist_id == "") {
                            is_trigger_bot_allowed = 0;
                            openChatBot();
                        } else if (easychat_form_assist_id != "" || easychat_minimized_chatbot == false) {
                            document.getElementById("allincall-chat-box").src = SERVER_URL + "/chat/index/?id=" + BOT_ID + '&name=' + BOT_NAME + '&theme=' + BOT_THEME + '&easychat_window_location=' + easychat_window_location + '&form_assist_id=' + easychat_form_assist_id + '&do_not_disturb=' + easychat_do_not_disturb + '&is_lead_generation=' + is_lead_generation + '&page_category=' + easychat_page_category.toString() + '&meta_data=' + meta_tags_information + '&easychat_intent_name=' + easychat_intent_name + '&is_web_landing_allowed=' + is_web_landing_allowed + '&campaign_link_query_id=' + campaign_link_query_id + '&selected_language=' + selected_language + '&is_initial_trigger_intent=' + is_initial_trigger_intent + '&web_page_source=' + web_page_source + "&query_question=" + welcome_banner_query_question + "&external_trigger_info=" + external_trigger_intent_info + "&is_voice_based_form_assist_enabled=" + is_voice_based_form_assist_enabled + "&enable_response_form_assist=" + enable_response_form_assist;
                            welcome_banner_query_question = "INTENT_NAME";
                            external_trigger_intent_info = "INTENT_INFO";
                            easychat_intent_name = "";
                            is_initial_trigger_intent = false;
                            is_web_landing_allowed = false;
                            // document.getElementById("allincall-chat-box").contentWindow.postMessage('open-chatbot','*')
                            //document.getElementById("chatbox-notification").style.display = "none"
                            try {
                                document.getElementById("one-popup-on-bot").style.display = "none";
                                document.getElementById("chatbox-notification").style.display = "none";
                                document.getElementById("allincall-popup").style.zIndex = "99999999";
                                document.getElementById("cross-chatbox-notification").style.display = "none";
                            } catch (err) {}
                        }
                    } else if (easychat_minimized_chatbot != true) {
                        document.getElementById("allincall-chat-box").src = SERVER_URL + "/chat/index/?id=" + BOT_ID + '&name=' + BOT_NAME + '&theme=' + BOT_THEME + '&easychat_window_location=' + easychat_window_location + '&form_assist_id=' + easychat_form_assist_id + '&do_not_disturb=' + easychat_do_not_disturb + '&is_lead_generation=' + is_lead_generation + '&page_category=' + easychat_page_category.toString() + '&meta_data=' + meta_tags_information + '&easychat_intent_name=' + easychat_intent_name + '&is_web_landing_allowed=' + is_web_landing_allowed + '&campaign_link_query_id=' + campaign_link_query_id + '&selected_language=' + selected_language + '&is_initial_trigger_intent=' + is_initial_trigger_intent + '&web_page_source=' + web_page_source + "&query_question=" + welcome_banner_query_question + "&external_trigger_info=" + external_trigger_intent_info + "&is_voice_based_form_assist_enabled=" + is_voice_based_form_assist_enabled;
                        welcome_banner_query_question = "INTENT_NAME";
                        external_trigger_intent_info = "INTENT_INFO";
                        easychat_intent_name = "";
                        is_web_landing_allowed = false;
                        // document.getElementById("allincall-chat-box").contentWindow.postMessage('open-chatbot','*')
                        if (!get_cookie("isFeedBackDone")) {
                            easychat_set_cookie("isFeedBackDone", "0", "", "")
                        }
                        try {
                            document.getElementById("chatbox-notification").style.display = "none";
                            document.getElementById("allincall-popup").style.zIndex = "99999999";
                            document.getElementById("cross-chatbox-notification").style.display = "none";
                            document.getElementById("one-popup-on-bot").style.display = "none";
                            setTimeout(function(e) {
                                document.getElementById("allincall-chat-box").contentWindow.postMessage({
                                    event_id: 'isFeedBackDone',
                                    data: get_cookie("isFeedBackDone")
                                }, "*")
                            }, 2000);
                        } catch (err) {}


                        // set livechat cookie
                        if (!get_cookie("livechat_cookie_session_id")) {
                            easychat_set_cookie("livechat_cookie_session_id", "", "", "")
                        }
                        setTimeout(function(e) {
                            document.getElementById("allincall-chat-box").contentWindow.postMessage({
                                event_id: 'livechat_cookie_session_user_id',
                                livechat_cookie_session_id: get_cookie("livechat_cookie_session_id"),
                            }, "*")
                        }, 1000);
                    }

                    this.style.display = "none";
                    document.body.style.overflow = "unset";
                    var chat_box_window = document.getElementById("allincall-chat-box");

                    if ((window.innerWidth < 500)) {
                        chat_box_window.style.display = "block";
                        chat_box_window.style.height = "100%";
                        chat_box_window.style.bottom = "0em";
                        chat_box_window.style.right = "0em";
                        //chat_box_window.style.animationName = "my-amine-blo";
                        try {
                            chat_box_window.classList.remove("animate__animated")
                            chat_box_window.classList.remove("animate__slideOutDown")
                            chat_box_window.classList.remove("allincall-scale-out-br")
                        } catch (err) {}
                        chat_box_window.className += "animate__animated animate__slideInUp";
                    } else {

                        if (BOT_POSITION == "right") {
                            chat_box_window.style.display = "block";
                            chat_box_window.style.right = "1em";
                            chat_box_window.style.animationName = "right-anime";
                        }
                        if (BOT_POSITION == "left") {
                            chat_box_window.style.display = "block";
                            chat_box_window.style.left = "1em"
                            chat_box_window.style.animationName = "left-anime";
                        }
                        if (BOT_POSITION == "bottom-right") {
                            try {
                                chat_box_window.classList.remove("animate__animated")
                                chat_box_window.classList.remove("animate__slideOutDown")
                                chat_box_window.classList.remove("allincall-scale-out-br")
                            } catch (err) {}
                            chat_box_window.className += "animate__animated animate__slideInUp";
                            chat_box_window.style.display = "block";
                            chat_box_window.style.bottom = "1em";
                            chat_box_window.style.right = "2em";
                            //chat_box_window.style.animationName = "bottom-left-right-anime";
                        }
                        if (BOT_POSITION == "top-right") {
                            chat_box_window.style.display = "block";
                            chat_box_window.style.right = "1em";
                            chat_box_window.style.top = "2em";
                            chat_box_window.style.animationName = "right-anime";
                        }
                        if (BOT_POSITION == "bottom-left") {
                            try {
                                chat_box_window.classList.remove("animate__animated")
                                chat_box_window.classList.remove("animate__slideOutDown")
                                chat_box_window.classList.remove("allincall-scale-out-bl")
                            } catch (err) {}
                            chat_box_window.className += "animate__animated animate__slideInUp";
                            chat_box_window.style.display = "block";
                            chat_box_window.style.left = "1em";
                            chat_box_window.style.bottom = "1em";
                            //chat_box_window.style.animationName = "bottom-left-right-anime";

                        }
                        if (BOT_POSITION == "top-left") {
                            chat_box_window.style.display = "block";
                            chat_box_window.style.left = "1em";
                            chat_box_window.style.top = "2em";
                            chat_box_window.style.animationName = "left-anime";
                        }
                    }
                });
            });
            if (is_lead_generation == 'true') {
                setTimeout(function(e) {
                    document.getElementById("allincall-popup").click();
                }, 3000)
            }
            check_auto_popup();
            check_campaign_link();
            check_welcome_banner_question();
        }
    }
    xhttp.send(params);

    window.addEventListener('message', function(event) {
        // IMPORTANT: Check the origin of the data! 
        if (~event.origin.indexOf(SERVER_URL)) {

            // The data has been sent from your site 
            // The data sent with postMessage is stored in event.data

            // Setting selected_language in local storage
            if (event.data.event_id === "set_local_storage") {
                window.localStorage["selected_language"] = event.data.data.var_value
                selected_language = event.data.data.var_value;
            }
            
            // setting cookie if user stopped autopop-up

            if (event.data.event_id === "auto_pop_up_denied") {

                easychat_set_cookie(event.data.data.cookie_name, event.data.data.cookie_value, event.data.data.expiration, event.data.data.path);
            }
            
            // setting feedback done cookie
            if (event.data.event_id === "isFeedBackDone") {
                easychat_set_cookie("isFeedBackDone", event.data.data, "", "")
            }

            // setting livechat session cookie and user id cookie
            if (event.data.event_id === "livechat_cookie_session_user_id") {
                easychat_set_cookie("livechat_cookie_session_id", event.data.data.livechat_cookie_session_id, "", "")
            }

            if (event.data.event_id === "unset_livechat_cookies") {
                easychat_set_cookie("livechat_cookie_session_id", "", new Date().getTime(), "")
            }

            if (event.data.event_id === "create-cobrowsing-lead" && is_easyassist_enabled == "true") {
                create_easyassist_cobrowsing_lead(event.data.data.phone, "Mobile Number");
                if (is_form_assist == "true") {
                    stop_all_activity();
                    window.clearTimeout(timer);
                }
                // $('#allincall-chat-box', window.document).hide("slow");
                // $('#allincall-popup', window.document).show("slow");
                //console.log("cobrowsing has been initiated");
                return;
            }

            if (event.data.event_id === "connect-with-agent" && is_easyassist_enabled == "true") {
                connect_with_easyassist_agent_with_details(event.data.data.full_name, event.data.data.mobile_number);
                if (is_form_assist == "true") {
                    stop_all_activity();
                    window.clearTimeout(timer);
                }
                //$('#allincall-chat-box', window.document).hide("slow");
                //$('#allincall-popup', window.document).show("slow");
                document.getElementById('allincall-chat-box').style.display="none";
                document.getElementById('allincall-popup').style.display = 'block';
                // document.getElementById("allincall-minimize-popup").style.display = "block";
                return;
            }

            if (event.data.event_id === 'initialize-cobrowse') {
                connect_with_cobrowse_agent(event.data.data.username, event.data.data.phone, event.data.data.livechat_session_id, event.data.data.cobrowsing_meeting_id, event.data.data.assigned_agent_username)
            }

            if (event.data.event_id === "set_cookie") {
                easychat_set_cookie(event.data.data.cookie_name, event.data.data.cookie_value, event.data.data.expiration, event.data.data.path);
                return;
            }

            if (event.data.event_id === "send_livechat_session_id") {
                document.getElementById("allincall-chat-box").contentWindow.postMessage({
                    event_id: 'livechat_cookie_session_user_id',
                    livechat_cookie_session_id: get_cookie("livechat_cookie_session_id"),
                }, "*")
            }

            if (is_form_assist == 'true') {
                if (event.data == "disable-form-assist") {
                    close_chatbot_animation()
                    setTimeout(function() {
                        document.getElementById("allincall-popup").style.display = "block";
                        if (is_minimization_enabled) {
                            document.getElementById("allincall-minimize-popup").style.display = "";
                            if (window.disable_auto_popup_minimized && get_cookie('is_bot_minimized') == 'true'){
                                document.getElementById("allincall-popup").style.display = "none";
                                document.getElementById("allincall-min-popup").style.display = "block";
                                document.getElementById("allincall-maximize-popup").style.display = "flex";
                                document.getElementById("allincall-minimize-popup").style.display = "none";
                                document.getElementById("allincall-maximize-popup-tooltip").style.visibility = "hidden";
                                document.getElementById("allincall-minimize-popup-tooltip").style.visibility = "hidden";
                                change_css_on_bot_minimization(BOT_POSITION)
                            }
                        }
                        document.getElementById("allincall-chat-box").style.display = "none";
                    }, 1000);
                    easychat_form_assist_id = "";
                    element_id = ""
                    window.clearTimeout(timer);
                    stop_all_activity()
                }
                if (event.data == "enable-form-assist") {
                    window.clearTimeout(timer);
                    enable_form_assist()
                }
            }

            if (event.data.event_id == "minimize-chatbot") {
                is_bot_minimized = true
                document.getElementById("allincall-chat-box").contentWindow.postMessage({
                    event_id: 'chatbot_minimized_state',
                    data: is_bot_minimized

                }, "*")
                minimize_chatbot_animation()

                MINIMIZE_TEXT = event.data.data.minimize_text;
                MAXIMIZE_TEXT = event.data.data.maximize_text;

                setTimeout(function() {
                    document.getElementById("allincall-popup").style.display = "block";
                    if (is_minimization_enabled) {
                        document.getElementById("allincall-minimize-popup").style.display = "";
                        if (window.disable_auto_popup_minimized && get_cookie('is_bot_minimized') == 'true'){
                            document.getElementById("allincall-popup").style.display = "none";
                            document.getElementById("allincall-min-popup").style.display = "block";
                            document.getElementById("allincall-maximize-popup").style.display = "flex";
                            document.getElementById("allincall-minimize-popup").style.display = "none";
                            document.getElementById("allincall-maximize-popup-tooltip").style.visibility = "hidden";
                            document.getElementById("allincall-minimize-popup-tooltip").style.visibility = "hidden";
                            change_css_on_bot_minimization(BOT_POSITION)
                        }
                    }
                    document.getElementById("allincall-chat-box").style.display = "none";
                }, 1000);
                easychat_minimized_chatbot = true;
                easychat_page_category = "";
                easychat_form_assist_id = "";
                if (is_form_assist == 'true') {
                    element_id = ""
                    window.starting_element = false
                    window.clearTimeout(auto_form_pop_timer)
                    window.clearTimeout(timer);
                    timer_is_on = 0
                    check_user_activity_status()
                }
            }

            if (event.data.event_id == "agent_unread_message"){
                document.getElementById("new-notification-count").innerHTML=event.data.data["message_count"];
                document.getElementById("new-notification-div").style.display="flex";
            }

            if (event.data.event_id == "chatbot_minimized_state") {
                document.getElementById("allincall-popup").click();
                document.getElementById("allincall-notification-count").style.display="none";
                is_bot_minimized = false
                    // document.getElementById('tooltiptext-minimize').style.display ="block";
                document.getElementById("allincall-chat-box").contentWindow.postMessage({
                    event_id: 'chatbot_minimized_state',
                    data: is_bot_minimized
                }, "*")

            }
            if (event.data == "close-bot") {
                close_chatbot_animation()
                setTimeout(function() {
                    document.getElementById("allincall-popup").style.display = "block";
                    if (is_minimization_enabled) {
                        document.getElementById("allincall-minimize-popup").style.display = "";
                        if (window.disable_auto_popup_minimized && get_cookie('is_bot_minimized') == 'true'){
                            document.getElementById("allincall-popup").style.display = "none";
                            document.getElementById("allincall-min-popup").style.display = "block";
                            document.getElementById("allincall-maximize-popup").style.display = "flex";
                            document.getElementById("allincall-minimize-popup").style.display = "none";
                            document.getElementById("allincall-maximize-popup-tooltip").style.visibility = "hidden";
                            document.getElementById("allincall-minimize-popup-tooltip").style.visibility = "hidden";
                            change_css_on_bot_minimization(BOT_POSITION)
                        }
                    }
                    document.getElementById("allincall-chat-box").style.display = "none";
                }, 1000);
                easychat_page_category = "";
                easychat_form_assist_id = "";
                easychat_minimized_chatbot = false;
                is_initial_trigger_intent = false;
                easychat_intent_name = "";
                if (is_form_assist == 'true') {
                    element_id = ""
                    window.starting_element = false
                    window.clearTimeout(auto_form_pop_timer)
                    window.clearTimeout(timer);
                    timer_is_on = 0
                    check_user_activity_status()
                }
            }

            if (event.data == "share-screen") {
                share_screen();
            }

            if (is_form_assist == 'true') {
                if (event.data == 'stop-form-assist') {
                    clearTimeout(timer);
                    stop_form_assist = true
                    easychat_form_assist_id = "";
                    stop_user_activity_status();
                }
            }

            if (event.data.event_id == "update-form-assist-language-objects") {

                bot_id = event.data.data.bot_id;
                selected_language = event.data.data.selected_language;
                get_language_updated_form_assist_items(bot_id , selected_language);

            }

        } else {
            // The data hasn't been sent from your site! 
            // Be careful! Do not use it. 
            return;
        }

    });
}

function change_css_on_bot_minimization(bot_position) {

    var greeting_bubble = false
    if(document.getElementsByClassName("greeting-bubble-notofication-wrapper").length > 0) {
        greeting_bubble = true
    }

    var new_notification_div = false
    if(document.getElementsByClassName("new-notification-div").length > 0) {
        new_notification_div = true
    }

        if(bot_position == "bottom-right"  || bot_position == "right") {

            if (greeting_bubble) {           
                document.getElementsByClassName("greeting-bubble-notofication-wrapper")[0].style.bottom = "80px"
                document.getElementsByClassName("greeting-bubble-notofication-wrapper")[0].style.right = "110px"
                document.getElementById("allincall-notification-count").style.right = "0px" 
            } 

            if (new_notification_div) {

                document.getElementsByClassName("new-notification-div")[0].style.top = "-50px"
                document.getElementsByClassName("new-notification-div")[0].style.right = "-20px"

            }
            
        } else if(bot_position == "bottom-left" || bot_position == "left") {
            
            if (greeting_bubble) { 
                document.getElementsByClassName("greeting-bubble-notofication-wrapper")[0].style.bottom = "80px"
                document.getElementsByClassName("greeting-bubble-notofication-wrapper")[0].style.left = "110px"
                document.getElementById("allincall-notification-count").style.left = "0px"  
            }

            if (new_notification_div) {

                document.getElementsByClassName("new-notification-div")[0].style.top = "-50px"
                document.getElementsByClassName("new-notification-div")[0].style.right = "-30px"
                
            }

        } else if(bot_position == "top-left") {
            
            if (greeting_bubble) { 
                document.getElementsByClassName("greeting-bubble-notofication-wrapper")[0].style.top = "60px"
                document.getElementsByClassName("greeting-bubble-notofication-wrapper")[0].style.left = "90px"
                document.getElementById("allincall-notification-count").style.left = "0px"  
            }

            if (new_notification_div) {
                document.getElementsByClassName("new-notification-div")[0].style.top = "35px"
                document.getElementsByClassName("new-notification-div")[0].style.left = "42px"  
            }

        } else if(bot_position == "top-right") {

            if (greeting_bubble) { 
                document.getElementsByClassName("greeting-bubble-notofication-wrapper")[0].style.top = "60px"
                document.getElementsByClassName("greeting-bubble-notofication-wrapper")[0].style.right = "90px" 
                document.getElementById("allincall-notification-count").style.right = "0px"   
            }

            if (new_notification_div) {
                document.getElementsByClassName("new-notification-div")[0].style.top = "35px"
                document.getElementsByClassName("new-notification-div")[0].style.right = "42px" 
            }

        }
}

function change_css_on_bot_maximization(bot_position) {

    var greeting_bubble = false
    if(document.getElementsByClassName("greeting-bubble-notofication-wrapper").length > 0) {
        greeting_bubble = true
    }

    var new_notification_div = false
    if(document.getElementsByClassName("new-notification-div").length > 0) {
        new_notification_div = true
    }
    
        if(bot_position == "bottom-right"  || bot_position == "right") {
            
            if (greeting_bubble) {
                document.getElementsByClassName("greeting-bubble-notofication-wrapper")[0].style.bottom = "156px"
                document.getElementsByClassName("greeting-bubble-notofication-wrapper")[0].style.right = "140px"
                document.getElementById("allincall-notification-count").style.right = "16px" 
            } 

            if (new_notification_div) {
                document.getElementsByClassName("new-notification-div")[0].style.top = "-40px"
                document.getElementsByClassName("new-notification-div")[0].style.right = "0px"
            }
            
            
        } else if(bot_position == "bottom-left" || bot_position == "left") {
            if (greeting_bubble) {

                document.getElementsByClassName("greeting-bubble-notofication-wrapper")[0].style.bottom = "156px"
                document.getElementsByClassName("greeting-bubble-notofication-wrapper")[0].style.left = "140px"
                document.getElementById("allincall-notification-count").style.left = "4px" 
            } 

            if (new_notification_div) {
                document.getElementsByClassName("new-notification-div")[0].style.top = "-40px"
                document.getElementsByClassName("new-notification-div")[0].style.right = "0px"
            }

        } else if(bot_position == "top-left") {

            if (greeting_bubble) {
            
                document.getElementsByClassName("greeting-bubble-notofication-wrapper")[0].style.top = "147px"
                document.getElementsByClassName("greeting-bubble-notofication-wrapper")[0].style.left = "150px"
                document.getElementById("allincall-notification-count").style.left = "4px"   
            } 

            if (new_notification_div) {
                document.getElementsByClassName("new-notification-div")[0].style.top = "100px"
                document.getElementsByClassName("new-notification-div")[0].style.left = "100px"
            }

        } else if(bot_position == "top-right") {

            if (greeting_bubble) {

                document.getElementsByClassName("greeting-bubble-notofication-wrapper")[0].style.top = "147px"
                document.getElementsByClassName("greeting-bubble-notofication-wrapper")[0].style.right = "150px"
                document.getElementById("allincall-notification-count").style.right = "16px"   
            }

            if (new_notification_div) {
                document.getElementsByClassName("new-notification-div")[0].style.top = "100px"
                document.getElementsByClassName("new-notification-div")[0].style.right = "100px"

            }

        }
    
}

function get_popup_id_and_classes(bot_position) {
    var ids_and_classes = []
    ids_and_classes[0] = "allincall-popup-wrapper"
    if(bot_position == "bottom-right"  || bot_position == "right") {

        ids_and_classes[1] = "bottom-right-position-wrapper"

    } else if(bot_position == "bottom-left" || bot_position == "left") {

        ids_and_classes[1] = "bottom-left-position-wrapper"

    } else if(bot_position == "top-left") {

        ids_and_classes[1] = "top-left-position-wrapper"

    } else if(bot_position == "top-right") {

        ids_and_classes[1] = "top-right-position-wrapper"

    } 

    ids_and_classes[2] = "allincall-popup-image-icon-wrapper"
    ids_and_classes[3] = "greeting-bubble-notofication-wrapper"
    return ids_and_classes
}

function trigger_autopopup_functionality(auto_pop_up_timer, auto_popup_type) {

    if (document.getElementById("allincall-chat-box").style.display == "block") {
        return;
    }
    if(auto_popup_type == "1"){
        auto_popup = setTimeout(function(e) {
        document.getElementById("allincall-popup").click();
        }, auto_pop_up_timer * 1000)
    }
    else if(auto_popup_type == "2" || auto_popup_type == "3"){
        auto_popup = setTimeout(function(e) {
            if(auto_popup_type == "2")
            document.getElementById("allincall-notification-count").style.display="flex"
            document.getElementById("notification-message-div").style.display="block"
            if(BOT_POSITION.indexOf("top") != -1 && document.getElementById("notification-message-div").parentNode.className.indexOf("greeting") != -1) {
                document.getElementById("notification-message-div").style.display="flex"
            }
        }, auto_pop_up_timer * 1000)
    }
}

function close_chatbot_animation() {
    var chat_box_window = document.getElementById("allincall-chat-box");
    try {
        chat_box_window.classList.remove("animate__animated")
        chat_box_window.classList.remove("animate__slideInUp")
        if (BOT_POSITION == "bottom-right") {
            chat_box_window.classList.remove("allincall-scale-out-br")
        } else if (BOT_POSITION == "bottom-left") {
            chat_box_window.classList.remove("allincall-scale-out-bl")
        }
    } catch (err) {}
    chat_box_window.className += "animate__animated animate__slideOutDown"
}

function send_message_into_allincall_chatbot_window(message) {
    var is_visible = true;
    if (document.getElementById("allincall-chat-box").style.display != "block") {
        //document.getElementById("allincall-popup").click();
        is_visible = false;
    }

    if (is_visible) {
        allincall_chat_window = document.getElementById("allincall-chat-box").contentWindow;
        allincall_chat_window.postMessage(message, SERVER_URL);
    } else {
        setTimeout(function(e) {
            allincall_chat_window = document.getElementById("allincall-chat-box").contentWindow;
            allincall_chat_window.postMessage(message, SERVER_URL);
        }, 2000);
    }
}

function hide_notification() {
    document.getElementById("chatbox-notification").style.display = "none";
    document.getElementById("cross-chatbox-notification").remove();
}

function show_cross() {
    try {
        document.getElementById("cross-chatbox-notification").style.display = "block";
    } catch (err) {}
}

function dont_show_cross() {
    try {
        document.getElementById("cross-chatbox-notification").style.display = "none";
    } catch (err) {}
}

function open_up_bot() {
    document.getElementById("allincall-popup").click();
}

function open_up_bot_by_greeting() {
    save_bubble_click_info("Greeting bubble");
    document.getElementById("allincall-popup").click();
}

function minimize_chatbot_animation() {
    var chat_box_window = document.getElementById("allincall-chat-box");
    try {
        chat_box_window.classList.remove("animate__animated")
        chat_box_window.classList.remove("animate__slideInUp")
        chat_box_window.classList.remove("animate__animated")
        chat_box_window.classList.remove("animate__slideOutDown")
    } catch (err) {}
    if (BOT_POSITION == "bottom-right") {
        chat_box_window.className += "allincall-scale-out-br";
    } else if (BOT_POSITION == "bottom-left") {
        chat_box_window.className += "allincall-scale-out-bl";
    }
}

function hide_auto_pop_up_notification_text(){
    document.getElementById("notification-message-div").style.display="none";
    if(document.getElementById("allincall-notification-count")) {
        document.getElementById("allincall-notification-count").style.display="none";
    }
    is_greeting_bubble_closed = true
    cancel_text_to_speech();
}

function open_greeting_intents(thiselem){
    easychat_intent_name = thiselem.innerHTML
    is_initial_trigger_intent = true
    save_bubble_click_info(easychat_intent_name);
    document.getElementById("allincall-popup").click();
}

function save_bot_click_count(){
    var json_string = JSON.stringify({
    bot_id: BOT_ID,
    bot_web_page: window.location.href,
    web_page_source: web_page_source,
    });

    json_string = encrypt_variable(json_string);
    json_string = encodeURIComponent(json_string);
    var params = 'json_string=' + json_string;
    var xhttp = new XMLHttpRequest();
    xhttp.open("POST", SERVER_URL + "/chat/save-bot-click-count/", true);
    xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            response = JSON.parse(this.responseText);
        }
    }
    xhttp.send(params);
}

///////////////////////////////////SUGGESTIONS LOADING START/////////////////////////////////////////////////

function load_storage(){
    if (window.localStorage['word_mapper_list'] != null) {
            window.localStorage.removeItem('word_mapper_list');
            window.localStorage.removeItem('autocorrect_bot_replace')
    }
    delete_messages_from_local(table_name)
    open_local_db()
}

function custom_decrypt(msg_string) {

    var payload = msg_string.split(".");
    var key = payload[0];
    var decrypted_data = payload[1];
    var decrypted = EasyChatCryptoJS.AES.decrypt(decrypted_data, EasyChatCryptoJS.enc.Utf8.parse(key), { iv: EasyChatCryptoJS.enc.Base64.parse(payload[2]) });
    return decrypted.toString(EasyChatCryptoJS.enc.Utf8);
}

function open_local_db() {
    window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
    window.IDBTransaction = window.IDBTransaction || window.webkitIDBTransaction || window.msIDBTransaction || {READ_WRITE: "readwrite"};
    window.IDBKeyRange = window.IDBKeyRange || window.webkitIDBKeyRange || window.msIDBKeyRange;

    if (!window.indexedDB) {
        console.log("Your browser doesn't support a stable version of IndexedDB.");
        is_indexed_db_supported = false;
        return;
    }

    var openRequest = window.indexedDB.open(db_name, 1);

    openRequest.onerror = function () {
        is_indexed_db_supported = false        
        console.error("Error", openRequest.error);
    };

    openRequest.onsuccess = function (event) {
        db = event.target.result; 

    };

    openRequest.onupgradeneeded = function (event) {
        db = event.target.result;

        switch (event.oldVersion) {
            case 0:
                //when user has no database
                suggestion_list_store = db.createObjectStore(table_name, { autoIncrement: true });
                suggestion_list_store.createIndex('table_index', 'table_index', { unique: false });
        }
    };
}

function get_object_store(store_name, mode) {
    try{
        var tx = db.transaction(store_name, mode);
        return tx.objectStore(store_name);
    }catch(err){
        return -1
    }
}

function add_message_to_local_db(data, store_name) {
    var db_obj = get_object_store(store_name, 'readwrite');
    var req;

    try {
        req = db_obj.add(data);
    } catch (error) {
        console.log(error);
    }

    req.onsuccess = function (evt) {
        console.log("saved data to local db!");
    };
    req.onerror = function () {
        console.error("error in saving data to local db: ", this.error);
    };
}

function delete_messages_from_local(store_name) {
    var suggestion_list_store = get_object_store(store_name, 'readwrite');
    if(suggestion_list_store != -1){
        var index = suggestion_list_store.index('table_index');
        var key = IDBKeyRange.only(table_index);
        index.openCursor(key, "next").onsuccess = function (event) {
            var cursor = event.target.result;
            if (cursor) {
                request = cursor.delete();

                request.onsuccess = function() {
                    console.log('deleted message successfully!');
                }
                cursor.continue();
            }
        };
    }
}

function get_suggestions() {
    web_page = window.location.href
    var json_string = JSON.stringify({
        bot_id: BOT_ID,
        count_of_chunk: count_of_chunk
    });
    json_string = encrypt_variable(json_string);
    json_string = encodeURIComponent(json_string);

    var xhttp = new XMLHttpRequest();
    var params = 'json_string=' + json_string
    xhttp.open("POST", SERVER_URL + "/chat/get-data-suggestions/", true);
    xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
            response = JSON.parse(this.responseText);
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response["status"] == 200) {
                suggestion_list_response = JSON.parse(response["sentence_list"]);
                word_mapper_list = JSON.parse(response["word_mapper_list"]);
                total_length_of_chunk = response["total_length_of_chunk"]
                suggestion_list = suggestion_list.concat(suggestion_list_response)
                delete_messages_from_local(table_name)
                suggestion_list_dict = {
                    'table_index': table_index,
                    'suggestion_list': suggestion_list,
                    }
                add_message_to_local_db(suggestion_list_dict,table_name)
                window.localStorage['word_mapper_list'] = JSON.stringify(word_mapper_list)
                document.getElementById("allincall-chat-box").contentWindow.postMessage({
                    event_id: 'collect_from_local_storage' 
                }, "*")
                count_of_chunk = count_of_chunk + 1
                if (total_length_of_chunk > 1 && count_of_chunk != total_length_of_chunk){
                    get_suggestions()
                }
                
            }else{
                console.log("Error in getting suggestions")
            }
        }
    }
    xhttp.send(params);
}

///////////////////////////////////SUGGESTIONS LOADING END/////////////////////////////////////////////////

////////// to check if location coming is of the form /chat/bot/?id /////////////////////

function correct_path_of_bot_for_autopopup(){
    window_location_and_parameters = window.location.pathname + window.location.search
    if (window_location_and_parameters.indexOf("/chat/bot/?id=") !== -1 || allowed_hosts_list.indexOf(window.location.hostname) == -1){
        return true;
    }
    return false;
}

//////////////////////////////////////////////// end /////////////////////////////////

///////// Add Save Bubble click count info /////////

function save_bubble_click_info(bubble_name){
    let selected_language = get_easychat_selected_language()
    var json_string = JSON.stringify({
    bot_id: BOT_ID,
    bubble_name: bubble_name,
    selected_language: selected_language,
    });

    json_string = encrypt_variable(json_string);
    json_string = encodeURIComponent(json_string);
    var params = 'json_string=' + json_string;
    var xhttp = new XMLHttpRequest();
    xhttp.open("POST", SERVER_URL + "/chat/save-bubble-click-info/", true);
    xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            response = JSON.parse(this.responseText);
        }
    }
    xhttp.send(params);
}

////// End Save bubble click count info /////////////

///// Add external trigger intent function /////

function trigger_chatbot_query(intent_info) {

    if (easychat_minimized_chatbot){
        document.getElementById("allincall-popup").click();
        document.getElementById("allincall-chat-box").contentWindow.postMessage({
            event_id: 'trigger-external-intent',
            data: intent_info
        }, "*")
    } else if (document.getElementById("allincall-chat-box").style.display == "none"){
        external_trigger_intent_info = intent_info;
        document.getElementById("allincall-popup").click();
    } else {
        document.getElementById("allincall-chat-box").contentWindow.postMessage({
            event_id: 'trigger-external-intent',
            data: intent_info
        }, "*")
    }
    
}

///// End external trigger intent function /////

function update_form_assist_intent_bubbels(){

    for (var intent_pk in form_assist_intent_bubble) {

        let elemens = document.querySelectorAll(".notification-intent-message-bubble.form-assist-intent-bubble")
        for(let i=0; i<elemens.length;i++){
            elem = elemens[i]
            if(elem && (elem.id == intent_pk)){
                elem.innerText = form_assist_intent_bubble[intent_pk]
            }
        }
    } 
    
}

function update_form_assist_auto_pop_up_text(){
    if(form_assist_intent_bubble_type == "1"){
        document.getElementById('form-assist-pop-up-text-for-type-1').innerHTML = window.form_assist_auto_pop_text 
    }

    else if(form_assist_intent_bubble_type == "2"){
        var elem = document.querySelector("#intent-bubble-greeting-message span")
        elem.innerText = window.form_assist_auto_pop_text
        // $("#intent-bubble-greeting-message span").html(window.form_assist_auto_pop_text )
    }
}

function get_language_updated_form_assist_items(bot_id , selected_language){


    var json_string = JSON.stringify({
        bot_id: bot_id,
        selected_language: selected_language,
    });
    json_string = encrypt_variable(json_string);
    json_string = encodeURIComponent(json_string);

    var xhttp = new XMLHttpRequest();
    var params = 'json_string=' + json_string
    xhttp.open("POST",  SERVER_URL + "/chat/get-language-updated-form-assist-details/", true);
    xhttp.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    xhttp.onreadystatechange = function() {
        if (this.readyState == 4 && this.status == 200) {
            response = JSON.parse(this.responseText);
            response = custom_decrypt(response)
            response = JSON.parse(response);
            if (response['status'] == 200) {

                window.is_form_assist_auto_pop_allowed = response.is_form_assist_auto_pop_allowed

                if(is_form_assist_auto_pop_allowed == true){

                    if( "form_assist_auto_pop_text" in response){

                        window.form_assist_auto_pop_text = response.form_assist_auto_pop_text;

                        update_form_assist_auto_pop_up_text();

                    }
                    if( "form_assist_intent_bubble" in response){
                        window.form_assist_intent_bubble = JSON.parse(response.form_assist_intent_bubble);

                        update_form_assist_intent_bubbels();
                    }
                    if( "form_assist_intent_responses_dict" in response){
                        window.form_assist_intent_responses_dict = JSON.parse(response.form_assist_intent_responses_dict);
                    }

                   
                }
            
            }
        }
    }
    xhttp.send(params);


}

function connect_with_cobrowse_agent(username, phone, livechat_session_id, cobrowsing_meeting_id, assigned_agent_username) {
    var title = window.location.href;
    if (document.querySelector("title") != null) {
        title = document.querySelector("title").innerHTML;
    }
    var description = "";
    if (document.querySelector("meta[name=description]") != null && document.querySelector("meta[name=description]") != undefined) {
        description = document.querySelector("meta[name=description]").content;
    }
    var url = window.location.href;
    var request_id = livechat_session_id;

    // var easyassist_customer_id = get_easyassist_cookie("easyassist_customer_id");
    // if (easyassist_customer_id == null || easyassist_customer_id == undefined) {
    //     easyassist_customer_id = "None";
    // }

    var easyassist_customer_id = "None";

    var selected_language = -1;
    let selected_product_category = -1;

    // var browsing_time_before_connect_click = get_easyassist_cookie("easyassist_customer_browsing_time");
    // if(browsing_time_before_connect_click == null || browsing_time_before_connect_click == undefined){
    //     browsing_time_before_connect_click = 0;
    // }

    var browsing_time_before_connect_click = 0;

    var longitude = null;
    var latitude = null;

    json_string = JSON.stringify({
        "request_id": request_id,
        "name": username,
        "mobile_number": phone,
        "longitude": longitude,
        "latitude": latitude,
        "selected_language": selected_language,
        "selected_product_category": selected_product_category,
        "active_url": window.location.href,
        "customer_id": easyassist_customer_id,
        "browsing_time_before_connect_click": browsing_time_before_connect_click,
        "is_request_from_greeting_bubble": false,
        "meta_data": {
            "product_details": {
                "title": title,
                "description": description,
                "url": url
            }
        },
        "is_livechat_request": true,
        "assigned_agent_username": assigned_agent_username,
    });

    encrypted_data = encrypt_variable(json_string);
    encrypted_data = {
        "Request": encrypted_data
    };
    var params = JSON.stringify(encrypted_data);

    var xhttp = new XMLHttpRequest();
    xhttp.open("POST", EASYASSIST_HOST_PROTOCOL + "://" + EASYASSIST_COBROWSE_HOST + "/easy-assist/initialize/", true);
    xhttp.setRequestHeader('Content-Type', 'application/json');
    xhttp.setRequestHeader('X-AccessToken', parent.window.EASYASSIST_COBROWSE_META.access_token);
    xhttp.onreadystatechange = function() {

        if (this.readyState == 4 && this.status == 200) {
            response = JSON.parse(this.responseText);
            response = custom_decrypt(response.Response);
            response = JSON.parse(response);
            // easyassist_clear_local_storage();

            if (response.status == 200) {
                console.log(response);
                set_easyassist_cookie("easyassist_session_created_on", "request");
                if(get_easyassist_cookie("easyassist_session_id") != undefined){
                    easyassist_terminate_cobrowsing_session(show_message=false)
                }

                set_easyassist_cookie("easyassist_session_id", response.session_id);
                set_easyassist_cookie("easyassist_request_timestamp", Date.now())

                document.getElementById("allincall-chat-box").contentWindow.postMessage({
                    event_id: 'cobrowse-session-id',
                    data: response.session_id,
                }, "*")

                send_cobrowsing_status_to_server('accepted', response.session_id, livechat_session_id, cobrowsing_meeting_id)

                if(localStorage.getItem("easyassist_session") == null){
                    var local_storage_json_object = {};
                    local_storage_json_object[response.session_id] = {};
                    localStorage.setItem("easyassist_session", JSON.stringify(local_storage_json_object));
                }

                set_easyassist_cookie("easyassist_cobrowsing_allowed", "true");

                if(EASYASSIST_COBROWSE_META.no_agent_connects_toast) {
                    easyassist_initiate_connection_with_timer_modal();
                } else {
                    if (EASYASSIST_COBROWSE_META.show_connect_confirmation_modal) {
                        easyassist_show_connection_modal();
                    }    
                }
                easyassist_close_browsing_modal();

            } else if (response.status == 103) {

                document.getElementById("modal-cobrowse-connect-error").innerHTML = "Please enter code shared by our agent";

            } else {

                easyassist_close_browsing_modal();
                easyassist_show_function_fail_modal(code=635);
                console.error(response);

            }
        } else if (this.readyState == 4) {
            easyassist_close_browsing_modal();
            easyassist_show_function_fail_modal(code=636);
        }
        document.getElementById("easyassist-co-browsing-connect-button").disabled = false;
    }
    xhttp.send(params);
}

function send_cobrowsing_status_to_server(status, cobrowse_session_id, livechat_session_id, cobrowsing_meeting_id) {
    json_string = {
        'meeting_id': cobrowsing_meeting_id,
        'livechat_session_id': livechat_session_id,
        'request_type': status,
        'cobrowse_session_id': cobrowse_session_id,
    }
    json_string = JSON.stringify(json_string);
    json_string = encrypt_variable(json_string);
    json_string = encodeURIComponent(json_string);

    var xhttp = new XMLHttpRequest();
    var params = "json_string=" + json_string;
    xhttp.open("POST", SERVER_URL + '/livechat/manage-cobrowsing-request/', true);
    xhttp.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    xhttp.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            response = this.response;
            response = JSON.parse(response);
            response = custom_decrypt(response);
            response = JSON.parse(response);
            if (response["status_code"] == 200 || response["status_code"] == "200") {
                console.log("status saved");
            }
        }
    };
    xhttp.send(params);
}





! function(t, e) {
	"object" == typeof exports ? module.exports = exports = e() : "function" == typeof define && define.amd ? (define("EasyChatCryptoJS", e), window.EasyChatCryptoJS = e()) : t.EasyChatCryptoJS = e()
}(this, function() {
	var t, e, r, i, n, o, s, c, a, h, l = l || function(t, e) {
		var r;
		if ("undefined" != typeof window && window.crypto && (r = window.crypto), !r && "undefined" != typeof window && window.msCrypto && (r = window.msCrypto), !r && "undefined" != typeof global && global.crypto && (r = global.crypto), !r && "function" == typeof require) try {
			r = require("crypto")
		} catch (t) {}
		var i = function() {
				if (r) {
					if ("function" == typeof r.getRandomValues) try {
						return r.getRandomValues(new Uint32Array(1))[0]
					} catch (t) {}
					if ("function" == typeof r.randomBytes) try {
						return r.randomBytes(4).readInt32LE()
					} catch (t) {}
				}
				throw new Error("Native crypto module could not be used to get secure random number.")
			},
			n = Object.create || function() {
				function t() {}
				return function(e) {
					var r;
					return t.prototype = e, r = new t, t.prototype = null, r
				}
			}(),
			o = {},
			s = o.lib = {},
			c = s.Base = {
				extend: function(t) {
					var e = n(this);
					return t && e.mixIn(t), e.hasOwnProperty("init") && this.init !== e.init || (e.init = function() {
						e.$super.init.apply(this, arguments)
					}), e.init.prototype = e, e.$super = this, e
				},
				create: function() {
					var t = this.extend();
					return t.init.apply(t, arguments), t
				},
				init: function() {},
				mixIn: function(t) {
					for (var e in t) t.hasOwnProperty(e) && (this[e] = t[e]);
					t.hasOwnProperty("toString") && (this.toString = t.toString)
				},
				clone: function() {
					return this.init.prototype.extend(this)
				}
			},
			a = s.WordArray = c.extend({
				init: function(t, e) {
					t = this.words = t || [], this.sigBytes = null != e ? e : 4 * t.length
				},
				toString: function(t) {
					return (t || l).stringify(this)
				},
				concat: function(t) {
					var e = this.words,
						r = t.words,
						i = this.sigBytes,
						n = t.sigBytes;
					if (this.clamp(), i % 4)
						for (var o = 0; o < n; o++) {
							var s = r[o >>> 2] >>> 24 - o % 4 * 8 & 255;
							e[i + o >>> 2] |= s << 24 - (i + o) % 4 * 8
						} else
							for (o = 0; o < n; o += 4) e[i + o >>> 2] = r[o >>> 2];
					return this.sigBytes += n, this
				},
				clamp: function() {
					var e = this.words,
						r = this.sigBytes;
					e[r >>> 2] &= 4294967295 << 32 - r % 4 * 8, e.length = t.ceil(r / 4)
				},
				clone: function() {
					var t = c.clone.call(this);
					return t.words = this.words.slice(0), t
				},
				random: function(t) {
					for (var e = [], r = 0; r < t; r += 4) e.push(i());
					return new a.init(e, t)
				}
			}),
			h = o.enc = {},
			l = h.Hex = {
				stringify: function(t) {
					for (var e = t.words, r = t.sigBytes, i = [], n = 0; n < r; n++) {
						var o = e[n >>> 2] >>> 24 - n % 4 * 8 & 255;
						i.push((o >>> 4).toString(16)), i.push((15 & o).toString(16))
					}
					return i.join("")
				},
				parse: function(t) {
					for (var e = t.length, r = [], i = 0; i < e; i += 2) r[i >>> 3] |= parseInt(t.substr(i, 2), 16) << 24 - i % 8 * 4;
					return new a.init(r, e / 2)
				}
			},
			f = h.Latin1 = {
				stringify: function(t) {
					for (var e = t.words, r = t.sigBytes, i = [], n = 0; n < r; n++) {
						var o = e[n >>> 2] >>> 24 - n % 4 * 8 & 255;
						i.push(String.fromCharCode(o))
					}
					return i.join("")
				},
				parse: function(t) {
					for (var e = t.length, r = [], i = 0; i < e; i++) r[i >>> 2] |= (255 & t.charCodeAt(i)) << 24 - i % 4 * 8;
					return new a.init(r, e)
				}
			},
			u = h.Utf8 = {
				stringify: function(t) {
					try {
						return decodeURIComponent(escape(f.stringify(t)))
					} catch (t) {
						throw new Error("Malformed UTF-8 data")
					}
				},
				parse: function(t) {
					return f.parse(unescape(encodeURIComponent(t)))
				}
			},
			d = s.BufferedBlockAlgorithm = c.extend({
				reset: function() {
					this._data = new a.init, this._nDataBytes = 0
				},
				_append: function(t) {
					"string" == typeof t && (t = u.parse(t)), this._data.concat(t), this._nDataBytes += t.sigBytes
				},
				_process: function(e) {
					var r, i = this._data,
						n = i.words,
						o = i.sigBytes,
						s = this.blockSize,
						c = o / (4 * s),
						h = (c = e ? t.ceil(c) : t.max((0 | c) - this._minBufferSize, 0)) * s,
						l = t.min(4 * h, o);
					if (h) {
						for (var f = 0; f < h; f += s) this._doProcessBlock(n, f);
						r = n.splice(0, h), i.sigBytes -= l
					}
					return new a.init(r, l)
				},
				clone: function() {
					var t = c.clone.call(this);
					return t._data = this._data.clone(), t
				},
				_minBufferSize: 0
			}),
			p = (s.Hasher = d.extend({
				cfg: c.extend(),
				init: function(t) {
					this.cfg = this.cfg.extend(t), this.reset()
				},
				reset: function() {
					d.reset.call(this), this._doReset()
				},
				update: function(t) {
					return this._append(t), this._process(), this
				},
				finalize: function(t) {
					return t && this._append(t), this._doFinalize()
				},
				blockSize: 16,
				_createHelper: function(t) {
					return function(e, r) {
						return new t.init(r).finalize(e)
					}
				},
				_createHmacHelper: function(t) {
					return function(e, r) {
						return new p.HMAC.init(t, r).finalize(e)
					}
				}
			}), o.algo = {});
		return o
	}(Math);
	return function() {
			var t = l,
				e = t.lib.WordArray;
			t.enc.Base64 = {
				stringify: function(t) {
					var e = t.words,
						r = t.sigBytes,
						i = this._map;
					t.clamp();
					for (var n = [], o = 0; o < r; o += 3)
						for (var s = (e[o >>> 2] >>> 24 - o % 4 * 8 & 255) << 16 | (e[o + 1 >>> 2] >>> 24 - (o + 1) % 4 * 8 & 255) << 8 | e[o + 2 >>> 2] >>> 24 - (o + 2) % 4 * 8 & 255, c = 0; c < 4 && o + .75 * c < r; c++) n.push(i.charAt(s >>> 6 * (3 - c) & 63));
					var a = i.charAt(64);
					if (a)
						for (; n.length % 4;) n.push(a);
					return n.join("")
				},
				parse: function(t) {
					var r = t.length,
						i = this._map,
						n = this._reverseMap;
					if (!n) {
						n = this._reverseMap = [];
						for (var o = 0; o < i.length; o++) n[i.charCodeAt(o)] = o
					}
					var s = i.charAt(64);
					if (s) {
						var c = t.indexOf(s); - 1 !== c && (r = c)
					}
					return function(t, r, i) {
						for (var n = [], o = 0, s = 0; s < r; s++)
							if (s % 4) {
								var c = i[t.charCodeAt(s - 1)] << s % 4 * 2,
									a = i[t.charCodeAt(s)] >>> 6 - s % 4 * 2,
									h = c | a;
								n[o >>> 2] |= h << 24 - o % 4 * 8, o++
							}
						return e.create(n, o)
					}(t, r, n)
				},
				_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
			}
		}(),
		function(t) {
			var e = l,
				r = e.lib,
				i = r.WordArray,
				n = r.Hasher,
				o = e.algo,
				s = [];
			! function() {
				for (var e = 0; e < 64; e++) s[e] = 4294967296 * t.abs(t.sin(e + 1)) | 0
			}();
			var c = o.MD5 = n.extend({
				_doReset: function() {
					this._hash = new i.init([1732584193, 4023233417, 2562383102, 271733878])
				},
				_doProcessBlock: function(t, e) {
					for (var r = 0; r < 16; r++) {
						var i = e + r,
							n = t[i];
						t[i] = 16711935 & (n << 8 | n >>> 24) | 4278255360 & (n << 24 | n >>> 8)
					}
					var o = this._hash.words,
						c = t[e + 0],
						l = t[e + 1],
						d = t[e + 2],
						p = t[e + 3],
						_ = t[e + 4],
						v = t[e + 5],
						y = t[e + 6],
						g = t[e + 7],
						B = t[e + 8],
						w = t[e + 9],
						k = t[e + 10],
						S = t[e + 11],
						m = t[e + 12],
						x = t[e + 13],
						b = t[e + 14],
						A = t[e + 15],
						H = o[0],
						z = o[1],
						C = o[2],
						E = o[3];
					H = a(H, z, C, E, c, 7, s[0]), E = a(E, H, z, C, l, 12, s[1]), C = a(C, E, H, z, d, 17, s[2]), z = a(z, C, E, H, p, 22, s[3]), H = a(H, z, C, E, _, 7, s[4]), E = a(E, H, z, C, v, 12, s[5]), C = a(C, E, H, z, y, 17, s[6]), z = a(z, C, E, H, g, 22, s[7]), H = a(H, z, C, E, B, 7, s[8]), E = a(E, H, z, C, w, 12, s[9]), C = a(C, E, H, z, k, 17, s[10]), z = a(z, C, E, H, S, 22, s[11]), H = a(H, z, C, E, m, 7, s[12]), E = a(E, H, z, C, x, 12, s[13]), C = a(C, E, H, z, b, 17, s[14]), H = h(H, z = a(z, C, E, H, A, 22, s[15]), C, E, l, 5, s[16]), E = h(E, H, z, C, y, 9, s[17]), C = h(C, E, H, z, S, 14, s[18]), z = h(z, C, E, H, c, 20, s[19]), H = h(H, z, C, E, v, 5, s[20]), E = h(E, H, z, C, k, 9, s[21]), C = h(C, E, H, z, A, 14, s[22]), z = h(z, C, E, H, _, 20, s[23]), H = h(H, z, C, E, w, 5, s[24]), E = h(E, H, z, C, b, 9, s[25]), C = h(C, E, H, z, p, 14, s[26]), z = h(z, C, E, H, B, 20, s[27]), H = h(H, z, C, E, x, 5, s[28]), E = h(E, H, z, C, d, 9, s[29]), C = h(C, E, H, z, g, 14, s[30]), H = f(H, z = h(z, C, E, H, m, 20, s[31]), C, E, v, 4, s[32]), E = f(E, H, z, C, B, 11, s[33]), C = f(C, E, H, z, S, 16, s[34]), z = f(z, C, E, H, b, 23, s[35]), H = f(H, z, C, E, l, 4, s[36]), E = f(E, H, z, C, _, 11, s[37]), C = f(C, E, H, z, g, 16, s[38]), z = f(z, C, E, H, k, 23, s[39]), H = f(H, z, C, E, x, 4, s[40]), E = f(E, H, z, C, c, 11, s[41]), C = f(C, E, H, z, p, 16, s[42]), z = f(z, C, E, H, y, 23, s[43]), H = f(H, z, C, E, w, 4, s[44]), E = f(E, H, z, C, m, 11, s[45]), C = f(C, E, H, z, A, 16, s[46]), H = u(H, z = f(z, C, E, H, d, 23, s[47]), C, E, c, 6, s[48]), E = u(E, H, z, C, g, 10, s[49]), C = u(C, E, H, z, b, 15, s[50]), z = u(z, C, E, H, v, 21, s[51]), H = u(H, z, C, E, m, 6, s[52]), E = u(E, H, z, C, p, 10, s[53]), C = u(C, E, H, z, k, 15, s[54]), z = u(z, C, E, H, l, 21, s[55]), H = u(H, z, C, E, B, 6, s[56]), E = u(E, H, z, C, A, 10, s[57]), C = u(C, E, H, z, y, 15, s[58]), z = u(z, C, E, H, x, 21, s[59]), H = u(H, z, C, E, _, 6, s[60]), E = u(E, H, z, C, S, 10, s[61]), C = u(C, E, H, z, d, 15, s[62]), z = u(z, C, E, H, w, 21, s[63]), o[0] = o[0] + H | 0, o[1] = o[1] + z | 0, o[2] = o[2] + C | 0, o[3] = o[3] + E | 0
				},
				_doFinalize: function() {
					var e = this._data,
						r = e.words,
						i = 8 * this._nDataBytes,
						n = 8 * e.sigBytes;
					r[n >>> 5] |= 128 << 24 - n % 32;
					var o = t.floor(i / 4294967296),
						s = i;
					r[15 + (n + 64 >>> 9 << 4)] = 16711935 & (o << 8 | o >>> 24) | 4278255360 & (o << 24 | o >>> 8), r[14 + (n + 64 >>> 9 << 4)] = 16711935 & (s << 8 | s >>> 24) | 4278255360 & (s << 24 | s >>> 8), e.sigBytes = 4 * (r.length + 1), this._process();
					for (var c = this._hash, a = c.words, h = 0; h < 4; h++) {
						var l = a[h];
						a[h] = 16711935 & (l << 8 | l >>> 24) | 4278255360 & (l << 24 | l >>> 8)
					}
					return c
				},
				clone: function() {
					var t = n.clone.call(this);
					return t._hash = this._hash.clone(), t
				}
			});

			function a(t, e, r, i, n, o, s) {
				var c = t + (e & r | ~e & i) + n + s;
				return (c << o | c >>> 32 - o) + e
			}

			function h(t, e, r, i, n, o, s) {
				var c = t + (e & i | r & ~i) + n + s;
				return (c << o | c >>> 32 - o) + e
			}

			function f(t, e, r, i, n, o, s) {
				var c = t + (e ^ r ^ i) + n + s;
				return (c << o | c >>> 32 - o) + e
			}

			function u(t, e, r, i, n, o, s) {
				var c = t + (r ^ (e | ~i)) + n + s;
				return (c << o | c >>> 32 - o) + e
			}
			e.MD5 = n._createHelper(c), e.HmacMD5 = n._createHmacHelper(c)
		}(Math), e = (t = l).lib, r = e.WordArray, i = e.Hasher, n = t.algo, o = [], s = n.SHA1 = i.extend({
			_doReset: function() {
				this._hash = new r.init([1732584193, 4023233417, 2562383102, 271733878, 3285377520])
			},
			_doProcessBlock: function(t, e) {
				for (var r = this._hash.words, i = r[0], n = r[1], s = r[2], c = r[3], a = r[4], h = 0; h < 80; h++) {
					if (h < 16) o[h] = 0 | t[e + h];
					else {
						var l = o[h - 3] ^ o[h - 8] ^ o[h - 14] ^ o[h - 16];
						o[h] = l << 1 | l >>> 31
					}
					var f = (i << 5 | i >>> 27) + a + o[h];
					f += h < 20 ? 1518500249 + (n & s | ~n & c) : h < 40 ? 1859775393 + (n ^ s ^ c) : h < 60 ? (n & s | n & c | s & c) - 1894007588 : (n ^ s ^ c) - 899497514, a = c, c = s, s = n << 30 | n >>> 2, n = i, i = f
				}
				r[0] = r[0] + i | 0, r[1] = r[1] + n | 0, r[2] = r[2] + s | 0, r[3] = r[3] + c | 0, r[4] = r[4] + a | 0
			},
			_doFinalize: function() {
				var t = this._data,
					e = t.words,
					r = 8 * this._nDataBytes,
					i = 8 * t.sigBytes;
				return e[i >>> 5] |= 128 << 24 - i % 32, e[14 + (i + 64 >>> 9 << 4)] = Math.floor(r / 4294967296), e[15 + (i + 64 >>> 9 << 4)] = r, t.sigBytes = 4 * e.length, this._process(), this._hash
			},
			clone: function() {
				var t = i.clone.call(this);
				return t._hash = this._hash.clone(), t
			}
		}), t.SHA1 = i._createHelper(s), t.HmacSHA1 = i._createHmacHelper(s),
		function(t) {
			var e = l,
				r = e.lib,
				i = r.WordArray,
				n = r.Hasher,
				o = e.algo,
				s = [],
				c = [];
			! function() {
				function e(e) {
					for (var r = t.sqrt(e), i = 2; i <= r; i++)
						if (!(e % i)) return !1;
					return !0
				}

				function r(t) {
					return 4294967296 * (t - (0 | t)) | 0
				}
				for (var i = 2, n = 0; n < 64;) e(i) && (n < 8 && (s[n] = r(t.pow(i, .5))), c[n] = r(t.pow(i, 1 / 3)), n++), i++
			}();
			var a = [],
				h = o.SHA256 = n.extend({
					_doReset: function() {
						this._hash = new i.init(s.slice(0))
					},
					_doProcessBlock: function(t, e) {
						for (var r = this._hash.words, i = r[0], n = r[1], o = r[2], s = r[3], h = r[4], l = r[5], f = r[6], u = r[7], d = 0; d < 64; d++) {
							if (d < 16) a[d] = 0 | t[e + d];
							else {
								var p = a[d - 15],
									_ = (p << 25 | p >>> 7) ^ (p << 14 | p >>> 18) ^ p >>> 3,
									v = a[d - 2],
									y = (v << 15 | v >>> 17) ^ (v << 13 | v >>> 19) ^ v >>> 10;
								a[d] = _ + a[d - 7] + y + a[d - 16]
							}
							var g = i & n ^ i & o ^ n & o,
								B = (i << 30 | i >>> 2) ^ (i << 19 | i >>> 13) ^ (i << 10 | i >>> 22),
								w = u + ((h << 26 | h >>> 6) ^ (h << 21 | h >>> 11) ^ (h << 7 | h >>> 25)) + (h & l ^ ~h & f) + c[d] + a[d];
							u = f, f = l, l = h, h = s + w | 0, s = o, o = n, n = i, i = w + (B + g) | 0
						}
						r[0] = r[0] + i | 0, r[1] = r[1] + n | 0, r[2] = r[2] + o | 0, r[3] = r[3] + s | 0, r[4] = r[4] + h | 0, r[5] = r[5] + l | 0, r[6] = r[6] + f | 0, r[7] = r[7] + u | 0
					},
					_doFinalize: function() {
						var e = this._data,
							r = e.words,
							i = 8 * this._nDataBytes,
							n = 8 * e.sigBytes;
						return r[n >>> 5] |= 128 << 24 - n % 32, r[14 + (n + 64 >>> 9 << 4)] = t.floor(i / 4294967296), r[15 + (n + 64 >>> 9 << 4)] = i, e.sigBytes = 4 * r.length, this._process(), this._hash
					},
					clone: function() {
						var t = n.clone.call(this);
						return t._hash = this._hash.clone(), t
					}
				});
			e.SHA256 = n._createHelper(h), e.HmacSHA256 = n._createHmacHelper(h)
		}(Math),
		function() {
			var t = l,
				e = t.lib.WordArray,
				r = t.enc;
			r.Utf16 = r.Utf16BE = {
				stringify: function(t) {
					for (var e = t.words, r = t.sigBytes, i = [], n = 0; n < r; n += 2) {
						var o = e[n >>> 2] >>> 16 - n % 4 * 8 & 65535;
						i.push(String.fromCharCode(o))
					}
					return i.join("")
				},
				parse: function(t) {
					for (var r = t.length, i = [], n = 0; n < r; n++) i[n >>> 1] |= t.charCodeAt(n) << 16 - n % 2 * 16;
					return e.create(i, 2 * r)
				}
			};

			function i(t) {
				return t << 8 & 4278255360 | t >>> 8 & 16711935
			}
			r.Utf16LE = {
				stringify: function(t) {
					for (var e = t.words, r = t.sigBytes, n = [], o = 0; o < r; o += 2) {
						var s = i(e[o >>> 2] >>> 16 - o % 4 * 8 & 65535);
						n.push(String.fromCharCode(s))
					}
					return n.join("")
				},
				parse: function(t) {
					for (var r = t.length, n = [], o = 0; o < r; o++) n[o >>> 1] |= i(t.charCodeAt(o) << 16 - o % 2 * 16);
					return e.create(n, 2 * r)
				}
			}
		}(),
		function() {
			if ("function" == typeof ArrayBuffer) {
				var t = l.lib.WordArray,
					e = t.init;
				(t.init = function(t) {
					if (t instanceof ArrayBuffer && (t = new Uint8Array(t)), (t instanceof Int8Array || "undefined" != typeof Uint8ClampedArray && t instanceof Uint8ClampedArray || t instanceof Int16Array || t instanceof Uint16Array || t instanceof Int32Array || t instanceof Uint32Array || t instanceof Float32Array || t instanceof Float64Array) && (t = new Uint8Array(t.buffer, t.byteOffset, t.byteLength)), t instanceof Uint8Array) {
						for (var r = t.byteLength, i = [], n = 0; n < r; n++) i[n >>> 2] |= t[n] << 24 - n % 4 * 8;
						e.call(this, i, r)
					} else e.apply(this, arguments)
				}).prototype = t
			}
		}(),
		function(t) {
			var e = l,
				r = e.lib,
				i = r.WordArray,
				n = r.Hasher,
				o = e.algo,
				s = i.create([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]),
				c = i.create([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]),
				a = i.create([11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6]),
				h = i.create([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]),
				f = i.create([0, 1518500249, 1859775393, 2400959708, 2840853838]),
				u = i.create([1352829926, 1548603684, 1836072691, 2053994217, 0]),
				d = o.RIPEMD160 = n.extend({
					_doReset: function() {
						this._hash = i.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520])
					},
					_doProcessBlock: function(t, e) {
						for (var r = 0; r < 16; r++) {
							var i = e + r,
								n = t[i];
							t[i] = 16711935 & (n << 8 | n >>> 24) | 4278255360 & (n << 24 | n >>> 8)
						}
						var o, l, d, w, k, S, m, x, b, A, H, z = this._hash.words,
							C = f.words,
							E = u.words,
							D = s.words,
							R = c.words,
							M = a.words,
							F = h.words;
						S = o = z[0], m = l = z[1], x = d = z[2], b = w = z[3], A = k = z[4];
						for (r = 0; r < 80; r += 1) H = o + t[e + D[r]] | 0, H += r < 16 ? p(l, d, w) + C[0] : r < 32 ? _(l, d, w) + C[1] : r < 48 ? v(l, d, w) + C[2] : r < 64 ? y(l, d, w) + C[3] : g(l, d, w) + C[4], H = (H = B(H |= 0, M[r])) + k | 0, o = k, k = w, w = B(d, 10), d = l, l = H, H = S + t[e + R[r]] | 0, H += r < 16 ? g(m, x, b) + E[0] : r < 32 ? y(m, x, b) + E[1] : r < 48 ? v(m, x, b) + E[2] : r < 64 ? _(m, x, b) + E[3] : p(m, x, b) + E[4], H = (H = B(H |= 0, F[r])) + A | 0, S = A, A = b, b = B(x, 10), x = m, m = H;
						H = z[1] + d + b | 0, z[1] = z[2] + w + A | 0, z[2] = z[3] + k + S | 0, z[3] = z[4] + o + m | 0, z[4] = z[0] + l + x | 0, z[0] = H
					},
					_doFinalize: function() {
						var t = this._data,
							e = t.words,
							r = 8 * this._nDataBytes,
							i = 8 * t.sigBytes;
						e[i >>> 5] |= 128 << 24 - i % 32, e[14 + (i + 64 >>> 9 << 4)] = 16711935 & (r << 8 | r >>> 24) | 4278255360 & (r << 24 | r >>> 8), t.sigBytes = 4 * (e.length + 1), this._process();
						for (var n = this._hash, o = n.words, s = 0; s < 5; s++) {
							var c = o[s];
							o[s] = 16711935 & (c << 8 | c >>> 24) | 4278255360 & (c << 24 | c >>> 8)
						}
						return n
					},
					clone: function() {
						var t = n.clone.call(this);
						return t._hash = this._hash.clone(), t
					}
				});

			function p(t, e, r) {
				return t ^ e ^ r
			}

			function _(t, e, r) {
				return t & e | ~t & r
			}

			function v(t, e, r) {
				return (t | ~e) ^ r
			}

			function y(t, e, r) {
				return t & r | e & ~r
			}

			function g(t, e, r) {
				return t ^ (e | ~r)
			}

			function B(t, e) {
				return t << e | t >>> 32 - e
			}
			e.RIPEMD160 = n._createHelper(d), e.HmacRIPEMD160 = n._createHmacHelper(d)
		}(Math),
		function() {
			var t = l,
				e = t.lib.Base,
				r = t.enc.Utf8;
			t.algo.HMAC = e.extend({
				init: function(t, e) {
					t = this._hasher = new t.init, "string" == typeof e && (e = r.parse(e));
					var i = t.blockSize,
						n = 4 * i;
					e.sigBytes > n && (e = t.finalize(e)), e.clamp();
					for (var o = this._oKey = e.clone(), s = this._iKey = e.clone(), c = o.words, a = s.words, h = 0; h < i; h++) c[h] ^= 1549556828, a[h] ^= 909522486;
					o.sigBytes = s.sigBytes = n, this.reset()
				},
				reset: function() {
					var t = this._hasher;
					t.reset(), t.update(this._iKey)
				},
				update: function(t) {
					return this._hasher.update(t), this
				},
				finalize: function(t) {
					var e = this._hasher,
						r = e.finalize(t);
					return e.reset(), e.finalize(this._oKey.clone().concat(r))
				}
			})
		}(),
		function() {
			var t = l,
				e = t.lib,
				r = e.Base,
				i = e.WordArray,
				n = t.algo,
				o = n.SHA1,
				s = n.HMAC,
				c = n.PBKDF2 = r.extend({
					cfg: r.extend({
						keySize: 4,
						hasher: o,
						iterations: 1
					}),
					init: function(t) {
						this.cfg = this.cfg.extend(t)
					},
					compute: function(t, e) {
						for (var r = this.cfg, n = s.create(r.hasher, t), o = i.create(), c = i.create([1]), a = o.words, h = c.words, l = r.keySize, f = r.iterations; a.length < l;) {
							var u = n.update(e).finalize(c);
							n.reset();
							for (var d = u.words, p = d.length, _ = u, v = 1; v < f; v++) {
								_ = n.finalize(_), n.reset();
								for (var y = _.words, g = 0; g < p; g++) d[g] ^= y[g]
							}
							o.concat(u), h[0]++
						}
						return o.sigBytes = 4 * l, o
					}
				});
			t.PBKDF2 = function(t, e, r) {
				return c.create(r).compute(t, e)
			}
		}(),
		function() {
			var t = l,
				e = t.lib,
				r = e.Base,
				i = e.WordArray,
				n = t.algo,
				o = n.MD5,
				s = n.EvpKDF = r.extend({
					cfg: r.extend({
						keySize: 4,
						hasher: o,
						iterations: 1
					}),
					init: function(t) {
						this.cfg = this.cfg.extend(t)
					},
					compute: function(t, e) {
						for (var r, n = this.cfg, o = n.hasher.create(), s = i.create(), c = s.words, a = n.keySize, h = n.iterations; c.length < a;) {
							r && o.update(r), r = o.update(t).finalize(e), o.reset();
							for (var l = 1; l < h; l++) r = o.finalize(r), o.reset();
							s.concat(r)
						}
						return s.sigBytes = 4 * a, s
					}
				});
			t.EvpKDF = function(t, e, r) {
				return s.create(r).compute(t, e)
			}
		}(),
		function() {
			var t = l,
				e = t.lib.WordArray,
				r = t.algo,
				i = r.SHA256,
				n = r.SHA224 = i.extend({
					_doReset: function() {
						this._hash = new e.init([3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428])
					},
					_doFinalize: function() {
						var t = i._doFinalize.call(this);
						return t.sigBytes -= 4, t
					}
				});
			t.SHA224 = i._createHelper(n), t.HmacSHA224 = i._createHmacHelper(n)
		}(),
		function(t) {
			var e = l,
				r = e.lib,
				i = r.Base,
				n = r.WordArray,
				o = e.x64 = {};
			o.Word = i.extend({
				init: function(t, e) {
					this.high = t, this.low = e
				}
			}), o.WordArray = i.extend({
				init: function(t, e) {
					t = this.words = t || [], this.sigBytes = null != e ? e : 8 * t.length
				},
				toX32: function() {
					for (var t = this.words, e = t.length, r = [], i = 0; i < e; i++) {
						var o = t[i];
						r.push(o.high), r.push(o.low)
					}
					return n.create(r, this.sigBytes)
				},
				clone: function() {
					for (var t = i.clone.call(this), e = t.words = this.words.slice(0), r = e.length, n = 0; n < r; n++) e[n] = e[n].clone();
					return t
				}
			})
		}(),
		function(t) {
			var e = l,
				r = e.lib,
				i = r.WordArray,
				n = r.Hasher,
				o = e.x64.Word,
				s = e.algo,
				c = [],
				a = [],
				h = [];
			! function() {
				for (var t = 1, e = 0, r = 0; r < 24; r++) {
					c[t + 5 * e] = (r + 1) * (r + 2) / 2 % 64;
					var i = (2 * t + 3 * e) % 5;
					t = e % 5, e = i
				}
				for (t = 0; t < 5; t++)
					for (e = 0; e < 5; e++) a[t + 5 * e] = e + (2 * t + 3 * e) % 5 * 5;
				for (var n = 1, s = 0; s < 24; s++) {
					for (var l = 0, f = 0, u = 0; u < 7; u++) {
						if (1 & n) {
							var d = (1 << u) - 1;
							d < 32 ? f ^= 1 << d : l ^= 1 << d - 32
						}
						128 & n ? n = n << 1 ^ 113 : n <<= 1
					}
					h[s] = o.create(l, f)
				}
			}();
			var f = [];
			! function() {
				for (var t = 0; t < 25; t++) f[t] = o.create()
			}();
			var u = s.SHA3 = n.extend({
				cfg: n.cfg.extend({
					outputLength: 512
				}),
				_doReset: function() {
					for (var t = this._state = [], e = 0; e < 25; e++) t[e] = new o.init;
					this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32
				},
				_doProcessBlock: function(t, e) {
					for (var r = this._state, i = this.blockSize / 2, n = 0; n < i; n++) {
						var o = t[e + 2 * n],
							s = t[e + 2 * n + 1];
						o = 16711935 & (o << 8 | o >>> 24) | 4278255360 & (o << 24 | o >>> 8), s = 16711935 & (s << 8 | s >>> 24) | 4278255360 & (s << 24 | s >>> 8), (z = r[n]).high ^= s, z.low ^= o
					}
					for (var l = 0; l < 24; l++) {
						for (var u = 0; u < 5; u++) {
							for (var d = 0, p = 0, _ = 0; _ < 5; _++) {
								d ^= (z = r[u + 5 * _]).high, p ^= z.low
							}
							var v = f[u];
							v.high = d, v.low = p
						}
						for (u = 0; u < 5; u++) {
							var y = f[(u + 4) % 5],
								g = f[(u + 1) % 5],
								B = g.high,
								w = g.low;
							for (d = y.high ^ (B << 1 | w >>> 31), p = y.low ^ (w << 1 | B >>> 31), _ = 0; _ < 5; _++) {
								(z = r[u + 5 * _]).high ^= d, z.low ^= p
							}
						}
						for (var k = 1; k < 25; k++) {
							var S = (z = r[k]).high,
								m = z.low,
								x = c[k];
							x < 32 ? (d = S << x | m >>> 32 - x, p = m << x | S >>> 32 - x) : (d = m << x - 32 | S >>> 64 - x, p = S << x - 32 | m >>> 64 - x);
							var b = f[a[k]];
							b.high = d, b.low = p
						}
						var A = f[0],
							H = r[0];
						A.high = H.high, A.low = H.low;
						for (u = 0; u < 5; u++)
							for (_ = 0; _ < 5; _++) {
								var z = r[k = u + 5 * _],
									C = f[k],
									E = f[(u + 1) % 5 + 5 * _],
									D = f[(u + 2) % 5 + 5 * _];
								z.high = C.high ^ ~E.high & D.high, z.low = C.low ^ ~E.low & D.low
							}
						z = r[0];
						var R = h[l];
						z.high ^= R.high, z.low ^= R.low
					}
				},
				_doFinalize: function() {
					var e = this._data,
						r = e.words,
						n = (this._nDataBytes, 8 * e.sigBytes),
						o = 32 * this.blockSize;
					r[n >>> 5] |= 1 << 24 - n % 32, r[(t.ceil((n + 1) / o) * o >>> 5) - 1] |= 128, e.sigBytes = 4 * r.length, this._process();
					for (var s = this._state, c = this.cfg.outputLength / 8, a = c / 8, h = [], l = 0; l < a; l++) {
						var f = s[l],
							u = f.high,
							d = f.low;
						u = 16711935 & (u << 8 | u >>> 24) | 4278255360 & (u << 24 | u >>> 8), d = 16711935 & (d << 8 | d >>> 24) | 4278255360 & (d << 24 | d >>> 8), h.push(d), h.push(u)
					}
					return new i.init(h, c)
				},
				clone: function() {
					for (var t = n.clone.call(this), e = t._state = this._state.slice(0), r = 0; r < 25; r++) e[r] = e[r].clone();
					return t
				}
			});
			e.SHA3 = n._createHelper(u), e.HmacSHA3 = n._createHmacHelper(u)
		}(Math),
		function() {
			var t = l,
				e = t.lib.Hasher,
				r = t.x64,
				i = r.Word,
				n = r.WordArray,
				o = t.algo;

			function s() {
				return i.create.apply(i, arguments)
			}
			var c = [s(1116352408, 3609767458), s(1899447441, 602891725), s(3049323471, 3964484399), s(3921009573, 2173295548), s(961987163, 4081628472), s(1508970993, 3053834265), s(2453635748, 2937671579), s(2870763221, 3664609560), s(3624381080, 2734883394), s(310598401, 1164996542), s(607225278, 1323610764), s(1426881987, 3590304994), s(1925078388, 4068182383), s(2162078206, 991336113), s(2614888103, 633803317), s(3248222580, 3479774868), s(3835390401, 2666613458), s(4022224774, 944711139), s(264347078, 2341262773), s(604807628, 2007800933), s(770255983, 1495990901), s(1249150122, 1856431235), s(1555081692, 3175218132), s(1996064986, 2198950837), s(2554220882, 3999719339), s(2821834349, 766784016), s(2952996808, 2566594879), s(3210313671, 3203337956), s(3336571891, 1034457026), s(3584528711, 2466948901), s(113926993, 3758326383), s(338241895, 168717936), s(666307205, 1188179964), s(773529912, 1546045734), s(1294757372, 1522805485), s(1396182291, 2643833823), s(1695183700, 2343527390), s(1986661051, 1014477480), s(2177026350, 1206759142), s(2456956037, 344077627), s(2730485921, 1290863460), s(2820302411, 3158454273), s(3259730800, 3505952657), s(3345764771, 106217008), s(3516065817, 3606008344), s(3600352804, 1432725776), s(4094571909, 1467031594), s(275423344, 851169720), s(430227734, 3100823752), s(506948616, 1363258195), s(659060556, 3750685593), s(883997877, 3785050280), s(958139571, 3318307427), s(1322822218, 3812723403), s(1537002063, 2003034995), s(1747873779, 3602036899), s(1955562222, 1575990012), s(2024104815, 1125592928), s(2227730452, 2716904306), s(2361852424, 442776044), s(2428436474, 593698344), s(2756734187, 3733110249), s(3204031479, 2999351573), s(3329325298, 3815920427), s(3391569614, 3928383900), s(3515267271, 566280711), s(3940187606, 3454069534), s(4118630271, 4000239992), s(116418474, 1914138554), s(174292421, 2731055270), s(289380356, 3203993006), s(460393269, 320620315), s(685471733, 587496836), s(852142971, 1086792851), s(1017036298, 365543100), s(1126000580, 2618297676), s(1288033470, 3409855158), s(1501505948, 4234509866), s(1607167915, 987167468), s(1816402316, 1246189591)],
				a = [];
			! function() {
				for (var t = 0; t < 80; t++) a[t] = s()
			}();
			var h = o.SHA512 = e.extend({
				_doReset: function() {
					this._hash = new n.init([new i.init(1779033703, 4089235720), new i.init(3144134277, 2227873595), new i.init(1013904242, 4271175723), new i.init(2773480762, 1595750129), new i.init(1359893119, 2917565137), new i.init(2600822924, 725511199), new i.init(528734635, 4215389547), new i.init(1541459225, 327033209)])
				},
				_doProcessBlock: function(t, e) {
					for (var r = this._hash.words, i = r[0], n = r[1], o = r[2], s = r[3], h = r[4], l = r[5], f = r[6], u = r[7], d = i.high, p = i.low, _ = n.high, v = n.low, y = o.high, g = o.low, B = s.high, w = s.low, k = h.high, S = h.low, m = l.high, x = l.low, b = f.high, A = f.low, H = u.high, z = u.low, C = d, E = p, D = _, R = v, M = y, F = g, P = B, W = w, O = k, I = S, U = m, K = x, X = b, L = A, j = H, N = z, T = 0; T < 80; T++) {
						var q, J, Z = a[T];
						if (T < 16) J = Z.high = 0 | t[e + 2 * T], q = Z.low = 0 | t[e + 2 * T + 1];
						else {
							var V = a[T - 15],
								G = V.high,
								$ = V.low,
								Q = (G >>> 1 | $ << 31) ^ (G >>> 8 | $ << 24) ^ G >>> 7,
								Y = ($ >>> 1 | G << 31) ^ ($ >>> 8 | G << 24) ^ ($ >>> 7 | G << 25),
								tt = a[T - 2],
								et = tt.high,
								rt = tt.low,
								it = (et >>> 19 | rt << 13) ^ (et << 3 | rt >>> 29) ^ et >>> 6,
								nt = (rt >>> 19 | et << 13) ^ (rt << 3 | et >>> 29) ^ (rt >>> 6 | et << 26),
								ot = a[T - 7],
								st = ot.high,
								ct = ot.low,
								at = a[T - 16],
								ht = at.high,
								lt = at.low;
							J = (J = (J = Q + st + ((q = Y + ct) >>> 0 < Y >>> 0 ? 1 : 0)) + it + ((q += nt) >>> 0 < nt >>> 0 ? 1 : 0)) + ht + ((q += lt) >>> 0 < lt >>> 0 ? 1 : 0), Z.high = J, Z.low = q
						}
						var ft, ut = O & U ^ ~O & X,
							dt = I & K ^ ~I & L,
							pt = C & D ^ C & M ^ D & M,
							_t = E & R ^ E & F ^ R & F,
							vt = (C >>> 28 | E << 4) ^ (C << 30 | E >>> 2) ^ (C << 25 | E >>> 7),
							yt = (E >>> 28 | C << 4) ^ (E << 30 | C >>> 2) ^ (E << 25 | C >>> 7),
							gt = (O >>> 14 | I << 18) ^ (O >>> 18 | I << 14) ^ (O << 23 | I >>> 9),
							Bt = (I >>> 14 | O << 18) ^ (I >>> 18 | O << 14) ^ (I << 23 | O >>> 9),
							wt = c[T],
							kt = wt.high,
							St = wt.low,
							mt = j + gt + ((ft = N + Bt) >>> 0 < N >>> 0 ? 1 : 0),
							xt = yt + _t;
						j = X, N = L, X = U, L = K, U = O, K = I, O = P + (mt = (mt = (mt = mt + ut + ((ft = ft + dt) >>> 0 < dt >>> 0 ? 1 : 0)) + kt + ((ft = ft + St) >>> 0 < St >>> 0 ? 1 : 0)) + J + ((ft = ft + q) >>> 0 < q >>> 0 ? 1 : 0)) + ((I = W + ft | 0) >>> 0 < W >>> 0 ? 1 : 0) | 0, P = M, W = F, M = D, F = R, D = C, R = E, C = mt + (vt + pt + (xt >>> 0 < yt >>> 0 ? 1 : 0)) + ((E = ft + xt | 0) >>> 0 < ft >>> 0 ? 1 : 0) | 0
					}
					p = i.low = p + E, i.high = d + C + (p >>> 0 < E >>> 0 ? 1 : 0), v = n.low = v + R, n.high = _ + D + (v >>> 0 < R >>> 0 ? 1 : 0), g = o.low = g + F, o.high = y + M + (g >>> 0 < F >>> 0 ? 1 : 0), w = s.low = w + W, s.high = B + P + (w >>> 0 < W >>> 0 ? 1 : 0), S = h.low = S + I, h.high = k + O + (S >>> 0 < I >>> 0 ? 1 : 0), x = l.low = x + K, l.high = m + U + (x >>> 0 < K >>> 0 ? 1 : 0), A = f.low = A + L, f.high = b + X + (A >>> 0 < L >>> 0 ? 1 : 0), z = u.low = z + N, u.high = H + j + (z >>> 0 < N >>> 0 ? 1 : 0)
				},
				_doFinalize: function() {
					var t = this._data,
						e = t.words,
						r = 8 * this._nDataBytes,
						i = 8 * t.sigBytes;
					return e[i >>> 5] |= 128 << 24 - i % 32, e[30 + (i + 128 >>> 10 << 5)] = Math.floor(r / 4294967296), e[31 + (i + 128 >>> 10 << 5)] = r, t.sigBytes = 4 * e.length, this._process(), this._hash.toX32()
				},
				clone: function() {
					var t = e.clone.call(this);
					return t._hash = this._hash.clone(), t
				},
				blockSize: 32
			});
			t.SHA512 = e._createHelper(h), t.HmacSHA512 = e._createHmacHelper(h)
		}(),
		function() {
			var t = l,
				e = t.x64,
				r = e.Word,
				i = e.WordArray,
				n = t.algo,
				o = n.SHA512,
				s = n.SHA384 = o.extend({
					_doReset: function() {
						this._hash = new i.init([new r.init(3418070365, 3238371032), new r.init(1654270250, 914150663), new r.init(2438529370, 812702999), new r.init(355462360, 4144912697), new r.init(1731405415, 4290775857), new r.init(2394180231, 1750603025), new r.init(3675008525, 1694076839), new r.init(1203062813, 3204075428)])
					},
					_doFinalize: function() {
						var t = o._doFinalize.call(this);
						return t.sigBytes -= 16, t
					}
				});
			t.SHA384 = o._createHelper(s), t.HmacSHA384 = o._createHmacHelper(s)
		}(), l.lib.Cipher || function(t) {
			var e = l,
				r = e.lib,
				i = r.Base,
				n = r.WordArray,
				o = r.BufferedBlockAlgorithm,
				s = e.enc,
				c = (s.Utf8, s.Base64),
				a = e.algo.EvpKDF,
				h = r.Cipher = o.extend({
					cfg: i.extend(),
					createEncryptor: function(t, e) {
						return this.create(this._ENC_XFORM_MODE, t, e)
					},
					createDecryptor: function(t, e) {
						return this.create(this._DEC_XFORM_MODE, t, e)
					},
					init: function(t, e, r) {
						this.cfg = this.cfg.extend(r), this._xformMode = t, this._key = e, this.reset()
					},
					reset: function() {
						o.reset.call(this), this._doReset()
					},
					process: function(t) {
						return this._append(t), this._process()
					},
					finalize: function(t) {
						return t && this._append(t), this._doFinalize()
					},
					keySize: 4,
					ivSize: 4,
					_ENC_XFORM_MODE: 1,
					_DEC_XFORM_MODE: 2,
					_createHelper: function() {
						function t(t) {
							return "string" == typeof t ? B : y
						}
						return function(e) {
							return {
								encrypt: function(r, i, n) {
									return t(i).encrypt(e, r, i, n)
								},
								decrypt: function(r, i, n) {
									return t(i).decrypt(e, r, i, n)
								}
							}
						}
					}()
				}),
				f = (r.StreamCipher = h.extend({
					_doFinalize: function() {
						return this._process(!0)
					},
					blockSize: 1
				}), e.mode = {}),
				u = r.BlockCipherMode = i.extend({
					createEncryptor: function(t, e) {
						return this.Encryptor.create(t, e)
					},
					createDecryptor: function(t, e) {
						return this.Decryptor.create(t, e)
					},
					init: function(t, e) {
						this._cipher = t, this._iv = e
					}
				}),
				d = f.CBC = function() {
					var e = u.extend();

					function r(e, r, i) {
						var n, o = this._iv;
						o ? (n = o, this._iv = t) : n = this._prevBlock;
						for (var s = 0; s < i; s++) e[r + s] ^= n[s]
					}
					return e.Encryptor = e.extend({
						processBlock: function(t, e) {
							var i = this._cipher,
								n = i.blockSize;
							r.call(this, t, e, n), i.encryptBlock(t, e), this._prevBlock = t.slice(e, e + n)
						}
					}), e.Decryptor = e.extend({
						processBlock: function(t, e) {
							var i = this._cipher,
								n = i.blockSize,
								o = t.slice(e, e + n);
							i.decryptBlock(t, e), r.call(this, t, e, n), this._prevBlock = o
						}
					}), e
				}(),
				p = (e.pad = {}).Pkcs7 = {
					pad: function(t, e) {
						for (var r = 4 * e, i = r - t.sigBytes % r, o = i << 24 | i << 16 | i << 8 | i, s = [], c = 0; c < i; c += 4) s.push(o);
						var a = n.create(s, i);
						t.concat(a)
					},
					unpad: function(t) {
						var e = 255 & t.words[t.sigBytes - 1 >>> 2];
						t.sigBytes -= e
					}
				},
				_ = (r.BlockCipher = h.extend({
					cfg: h.cfg.extend({
						mode: d,
						padding: p
					}),
					reset: function() {
						var t;
						h.reset.call(this);
						var e = this.cfg,
							r = e.iv,
							i = e.mode;
						this._xformMode == this._ENC_XFORM_MODE ? t = i.createEncryptor : (t = i.createDecryptor, this._minBufferSize = 1), this._mode && this._mode.__creator == t ? this._mode.init(this, r && r.words) : (this._mode = t.call(i, this, r && r.words), this._mode.__creator = t)
					},
					_doProcessBlock: function(t, e) {
						this._mode.processBlock(t, e)
					},
					_doFinalize: function() {
						var t, e = this.cfg.padding;
						return this._xformMode == this._ENC_XFORM_MODE ? (e.pad(this._data, this.blockSize), t = this._process(!0)) : (t = this._process(!0), e.unpad(t)), t
					},
					blockSize: 4
				}), r.CipherParams = i.extend({
					init: function(t) {
						this.mixIn(t)
					},
					toString: function(t) {
						return (t || this.formatter).stringify(this)
					}
				})),
				v = (e.format = {}).OpenSSL = {
					stringify: function(t) {
						var e = t.ciphertext,
							r = t.salt;
						return (r ? n.create([1398893684, 1701076831]).concat(r).concat(e) : e).toString(c)
					},
					parse: function(t) {
						var e, r = c.parse(t),
							i = r.words;
						return 1398893684 == i[0] && 1701076831 == i[1] && (e = n.create(i.slice(2, 4)), i.splice(0, 4), r.sigBytes -= 16), _.create({
							ciphertext: r,
							salt: e
						})
					}
				},
				y = r.SerializableCipher = i.extend({
					cfg: i.extend({
						format: v
					}),
					encrypt: function(t, e, r, i) {
						i = this.cfg.extend(i);
						var n = t.createEncryptor(r, i),
							o = n.finalize(e),
							s = n.cfg;
						return _.create({
							ciphertext: o,
							key: r,
							iv: s.iv,
							algorithm: t,
							mode: s.mode,
							padding: s.padding,
							blockSize: t.blockSize,
							formatter: i.format
						})
					},
					decrypt: function(t, e, r, i) {
						return i = this.cfg.extend(i), e = this._parse(e, i.format), t.createDecryptor(r, i).finalize(e.ciphertext)
					},
					_parse: function(t, e) {
						return "string" == typeof t ? e.parse(t, this) : t
					}
				}),
				g = (e.kdf = {}).OpenSSL = {
					execute: function(t, e, r, i) {
						i || (i = n.random(8));
						var o = a.create({
								keySize: e + r
							}).compute(t, i),
							s = n.create(o.words.slice(e), 4 * r);
						return o.sigBytes = 4 * e, _.create({
							key: o,
							iv: s,
							salt: i
						})
					}
				},
				B = r.PasswordBasedCipher = y.extend({
					cfg: y.cfg.extend({
						kdf: g
					}),
					encrypt: function(t, e, r, i) {
						var n = (i = this.cfg.extend(i)).kdf.execute(r, t.keySize, t.ivSize);
						i.iv = n.iv;
						var o = y.encrypt.call(this, t, e, n.key, i);
						return o.mixIn(n), o
					},
					decrypt: function(t, e, r, i) {
						i = this.cfg.extend(i), e = this._parse(e, i.format);
						var n = i.kdf.execute(r, t.keySize, t.ivSize, e.salt);
						return i.iv = n.iv, y.decrypt.call(this, t, e, n.key, i)
					}
				})
		}(), l.mode.CFB = function() {
			var t = l.lib.BlockCipherMode.extend();

			function e(t, e, r, i) {
				var n, o = this._iv;
				o ? (n = o.slice(0), this._iv = void 0) : n = this._prevBlock, i.encryptBlock(n, 0);
				for (var s = 0; s < r; s++) t[e + s] ^= n[s]
			}
			return t.Encryptor = t.extend({
				processBlock: function(t, r) {
					var i = this._cipher,
						n = i.blockSize;
					e.call(this, t, r, n, i), this._prevBlock = t.slice(r, r + n)
				}
			}), t.Decryptor = t.extend({
				processBlock: function(t, r) {
					var i = this._cipher,
						n = i.blockSize,
						o = t.slice(r, r + n);
					e.call(this, t, r, n, i), this._prevBlock = o
				}
			}), t
		}(), l.mode.ECB = ((c = l.lib.BlockCipherMode.extend()).Encryptor = c.extend({
			processBlock: function(t, e) {
				this._cipher.encryptBlock(t, e)
			}
		}), c.Decryptor = c.extend({
			processBlock: function(t, e) {
				this._cipher.decryptBlock(t, e)
			}
		}), c), l.pad.AnsiX923 = {
			pad: function(t, e) {
				var r = t.sigBytes,
					i = 4 * e,
					n = i - r % i,
					o = r + n - 1;
				t.clamp(), t.words[o >>> 2] |= n << 24 - o % 4 * 8, t.sigBytes += n
			},
			unpad: function(t) {
				var e = 255 & t.words[t.sigBytes - 1 >>> 2];
				t.sigBytes -= e
			}
		}, l.pad.Iso10126 = {
			pad: function(t, e) {
				var r = 4 * e,
					i = r - t.sigBytes % r;
				t.concat(l.lib.WordArray.random(i - 1)).concat(l.lib.WordArray.create([i << 24], 1))
			},
			unpad: function(t) {
				var e = 255 & t.words[t.sigBytes - 1 >>> 2];
				t.sigBytes -= e
			}
		}, l.pad.Iso97971 = {
			pad: function(t, e) {
				t.concat(l.lib.WordArray.create([2147483648], 1)), l.pad.ZeroPadding.pad(t, e)
			},
			unpad: function(t) {
				l.pad.ZeroPadding.unpad(t), t.sigBytes--
			}
		}, l.mode.OFB = (a = l.lib.BlockCipherMode.extend(), h = a.Encryptor = a.extend({
			processBlock: function(t, e) {
				var r = this._cipher,
					i = r.blockSize,
					n = this._iv,
					o = this._keystream;
				n && (o = this._keystream = n.slice(0), this._iv = void 0), r.encryptBlock(o, 0);
				for (var s = 0; s < i; s++) t[e + s] ^= o[s]
			}
		}), a.Decryptor = h, a), l.pad.NoPadding = {
			pad: function() {},
			unpad: function() {}
		},
		function(t) {
			var e = l,
				r = e.lib.CipherParams,
				i = e.enc.Hex;
			e.format.Hex = {
				stringify: function(t) {
					return t.ciphertext.toString(i)
				},
				parse: function(t) {
					var e = i.parse(t);
					return r.create({
						ciphertext: e
					})
				}
			}
		}(),
		function() {
			var t = l,
				e = t.lib.BlockCipher,
				r = t.algo,
				i = [],
				n = [],
				o = [],
				s = [],
				c = [],
				a = [],
				h = [],
				f = [],
				u = [],
				d = [];
			! function() {
				for (var t = [], e = 0; e < 256; e++) t[e] = e < 128 ? e << 1 : e << 1 ^ 283;
				var r = 0,
					l = 0;
				for (e = 0; e < 256; e++) {
					var p = l ^ l << 1 ^ l << 2 ^ l << 3 ^ l << 4;
					p = p >>> 8 ^ 255 & p ^ 99, i[r] = p, n[p] = r;
					var _ = t[r],
						v = t[_],
						y = t[v],
						g = 257 * t[p] ^ 16843008 * p;
					o[r] = g << 24 | g >>> 8, s[r] = g << 16 | g >>> 16, c[r] = g << 8 | g >>> 24, a[r] = g;
					g = 16843009 * y ^ 65537 * v ^ 257 * _ ^ 16843008 * r;
					h[p] = g << 24 | g >>> 8, f[p] = g << 16 | g >>> 16, u[p] = g << 8 | g >>> 24, d[p] = g, r ? (r = _ ^ t[t[t[y ^ _]]], l ^= t[t[l]]) : r = l = 1
				}
			}();
			var p = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54],
				_ = r.AES = e.extend({
					_doReset: function() {
						if (!this._nRounds || this._keyPriorReset !== this._key) {
							for (var t = this._keyPriorReset = this._key, e = t.words, r = t.sigBytes / 4, n = 4 * ((this._nRounds = r + 6) + 1), o = this._keySchedule = [], s = 0; s < n; s++) s < r ? o[s] = e[s] : (l = o[s - 1], s % r ? r > 6 && s % r == 4 && (l = i[l >>> 24] << 24 | i[l >>> 16 & 255] << 16 | i[l >>> 8 & 255] << 8 | i[255 & l]) : (l = i[(l = l << 8 | l >>> 24) >>> 24] << 24 | i[l >>> 16 & 255] << 16 | i[l >>> 8 & 255] << 8 | i[255 & l], l ^= p[s / r | 0] << 24), o[s] = o[s - r] ^ l);
							for (var c = this._invKeySchedule = [], a = 0; a < n; a++) {
								s = n - a;
								if (a % 4) var l = o[s];
								else l = o[s - 4];
								c[a] = a < 4 || s <= 4 ? l : h[i[l >>> 24]] ^ f[i[l >>> 16 & 255]] ^ u[i[l >>> 8 & 255]] ^ d[i[255 & l]]
							}
						}
					},
					encryptBlock: function(t, e) {
						this._doCryptBlock(t, e, this._keySchedule, o, s, c, a, i)
					},
					decryptBlock: function(t, e) {
						var r = t[e + 1];
						t[e + 1] = t[e + 3], t[e + 3] = r, this._doCryptBlock(t, e, this._invKeySchedule, h, f, u, d, n);
						r = t[e + 1];
						t[e + 1] = t[e + 3], t[e + 3] = r
					},
					_doCryptBlock: function(t, e, r, i, n, o, s, c) {
						for (var a = this._nRounds, h = t[e] ^ r[0], l = t[e + 1] ^ r[1], f = t[e + 2] ^ r[2], u = t[e + 3] ^ r[3], d = 4, p = 1; p < a; p++) {
							var _ = i[h >>> 24] ^ n[l >>> 16 & 255] ^ o[f >>> 8 & 255] ^ s[255 & u] ^ r[d++],
								v = i[l >>> 24] ^ n[f >>> 16 & 255] ^ o[u >>> 8 & 255] ^ s[255 & h] ^ r[d++],
								y = i[f >>> 24] ^ n[u >>> 16 & 255] ^ o[h >>> 8 & 255] ^ s[255 & l] ^ r[d++],
								g = i[u >>> 24] ^ n[h >>> 16 & 255] ^ o[l >>> 8 & 255] ^ s[255 & f] ^ r[d++];
							h = _, l = v, f = y, u = g
						}
						_ = (c[h >>> 24] << 24 | c[l >>> 16 & 255] << 16 | c[f >>> 8 & 255] << 8 | c[255 & u]) ^ r[d++], v = (c[l >>> 24] << 24 | c[f >>> 16 & 255] << 16 | c[u >>> 8 & 255] << 8 | c[255 & h]) ^ r[d++], y = (c[f >>> 24] << 24 | c[u >>> 16 & 255] << 16 | c[h >>> 8 & 255] << 8 | c[255 & l]) ^ r[d++], g = (c[u >>> 24] << 24 | c[h >>> 16 & 255] << 16 | c[l >>> 8 & 255] << 8 | c[255 & f]) ^ r[d++];
						t[e] = _, t[e + 1] = v, t[e + 2] = y, t[e + 3] = g
					},
					keySize: 8
				});
			t.AES = e._createHelper(_)
		}(),
		function() {
			var t = l,
				e = t.lib,
				r = e.WordArray,
				i = e.BlockCipher,
				n = t.algo,
				o = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4],
				s = [14, 17, 11, 24, 1, 5, 3, 28, 15, 6, 21, 10, 23, 19, 12, 4, 26, 8, 16, 7, 27, 20, 13, 2, 41, 52, 31, 37, 47, 55, 30, 40, 51, 45, 33, 48, 44, 49, 39, 56, 34, 53, 46, 42, 50, 36, 29, 32],
				c = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28],
				a = [{
					0: 8421888,
					268435456: 32768,
					536870912: 8421378,
					805306368: 2,
					1073741824: 512,
					1342177280: 8421890,
					1610612736: 8389122,
					1879048192: 8388608,
					2147483648: 514,
					2415919104: 8389120,
					2684354560: 33280,
					2952790016: 8421376,
					3221225472: 32770,
					3489660928: 8388610,
					3758096384: 0,
					4026531840: 33282,
					134217728: 0,
					402653184: 8421890,
					671088640: 33282,
					939524096: 32768,
					1207959552: 8421888,
					1476395008: 512,
					1744830464: 8421378,
					2013265920: 2,
					2281701376: 8389120,
					2550136832: 33280,
					2818572288: 8421376,
					3087007744: 8389122,
					3355443200: 8388610,
					3623878656: 32770,
					3892314112: 514,
					4160749568: 8388608,
					1: 32768,
					268435457: 2,
					536870913: 8421888,
					805306369: 8388608,
					1073741825: 8421378,
					1342177281: 33280,
					1610612737: 512,
					1879048193: 8389122,
					2147483649: 8421890,
					2415919105: 8421376,
					2684354561: 8388610,
					2952790017: 33282,
					3221225473: 514,
					3489660929: 8389120,
					3758096385: 32770,
					4026531841: 0,
					134217729: 8421890,
					402653185: 8421376,
					671088641: 8388608,
					939524097: 512,
					1207959553: 32768,
					1476395009: 8388610,
					1744830465: 2,
					2013265921: 33282,
					2281701377: 32770,
					2550136833: 8389122,
					2818572289: 514,
					3087007745: 8421888,
					3355443201: 8389120,
					3623878657: 0,
					3892314113: 33280,
					4160749569: 8421378
				}, {
					0: 1074282512,
					16777216: 16384,
					33554432: 524288,
					50331648: 1074266128,
					67108864: 1073741840,
					83886080: 1074282496,
					100663296: 1073758208,
					117440512: 16,
					134217728: 540672,
					150994944: 1073758224,
					167772160: 1073741824,
					184549376: 540688,
					201326592: 524304,
					218103808: 0,
					234881024: 16400,
					251658240: 1074266112,
					8388608: 1073758208,
					25165824: 540688,
					41943040: 16,
					58720256: 1073758224,
					75497472: 1074282512,
					92274688: 1073741824,
					109051904: 524288,
					125829120: 1074266128,
					142606336: 524304,
					159383552: 0,
					176160768: 16384,
					192937984: 1074266112,
					209715200: 1073741840,
					226492416: 540672,
					243269632: 1074282496,
					260046848: 16400,
					268435456: 0,
					285212672: 1074266128,
					301989888: 1073758224,
					318767104: 1074282496,
					335544320: 1074266112,
					352321536: 16,
					369098752: 540688,
					385875968: 16384,
					402653184: 16400,
					419430400: 524288,
					436207616: 524304,
					452984832: 1073741840,
					469762048: 540672,
					486539264: 1073758208,
					503316480: 1073741824,
					520093696: 1074282512,
					276824064: 540688,
					293601280: 524288,
					310378496: 1074266112,
					327155712: 16384,
					343932928: 1073758208,
					360710144: 1074282512,
					377487360: 16,
					394264576: 1073741824,
					411041792: 1074282496,
					427819008: 1073741840,
					444596224: 1073758224,
					461373440: 524304,
					478150656: 0,
					494927872: 16400,
					511705088: 1074266128,
					528482304: 540672
				}, {
					0: 260,
					1048576: 0,
					2097152: 67109120,
					3145728: 65796,
					4194304: 65540,
					5242880: 67108868,
					6291456: 67174660,
					7340032: 67174400,
					8388608: 67108864,
					9437184: 67174656,
					10485760: 65792,
					11534336: 67174404,
					12582912: 67109124,
					13631488: 65536,
					14680064: 4,
					15728640: 256,
					524288: 67174656,
					1572864: 67174404,
					2621440: 0,
					3670016: 67109120,
					4718592: 67108868,
					5767168: 65536,
					6815744: 65540,
					7864320: 260,
					8912896: 4,
					9961472: 256,
					11010048: 67174400,
					12058624: 65796,
					13107200: 65792,
					14155776: 67109124,
					15204352: 67174660,
					16252928: 67108864,
					16777216: 67174656,
					17825792: 65540,
					18874368: 65536,
					19922944: 67109120,
					20971520: 256,
					22020096: 67174660,
					23068672: 67108868,
					24117248: 0,
					25165824: 67109124,
					26214400: 67108864,
					27262976: 4,
					28311552: 65792,
					29360128: 67174400,
					30408704: 260,
					31457280: 65796,
					32505856: 67174404,
					17301504: 67108864,
					18350080: 260,
					19398656: 67174656,
					20447232: 0,
					21495808: 65540,
					22544384: 67109120,
					23592960: 256,
					24641536: 67174404,
					25690112: 65536,
					26738688: 67174660,
					27787264: 65796,
					28835840: 67108868,
					29884416: 67109124,
					30932992: 67174400,
					31981568: 4,
					33030144: 65792
				}, {
					0: 2151682048,
					65536: 2147487808,
					131072: 4198464,
					196608: 2151677952,
					262144: 0,
					327680: 4198400,
					393216: 2147483712,
					458752: 4194368,
					524288: 2147483648,
					589824: 4194304,
					655360: 64,
					720896: 2147487744,
					786432: 2151678016,
					851968: 4160,
					917504: 4096,
					983040: 2151682112,
					32768: 2147487808,
					98304: 64,
					163840: 2151678016,
					229376: 2147487744,
					294912: 4198400,
					360448: 2151682112,
					425984: 0,
					491520: 2151677952,
					557056: 4096,
					622592: 2151682048,
					688128: 4194304,
					753664: 4160,
					819200: 2147483648,
					884736: 4194368,
					950272: 4198464,
					1015808: 2147483712,
					1048576: 4194368,
					1114112: 4198400,
					1179648: 2147483712,
					1245184: 0,
					1310720: 4160,
					1376256: 2151678016,
					1441792: 2151682048,
					1507328: 2147487808,
					1572864: 2151682112,
					1638400: 2147483648,
					1703936: 2151677952,
					1769472: 4198464,
					1835008: 2147487744,
					1900544: 4194304,
					1966080: 64,
					2031616: 4096,
					1081344: 2151677952,
					1146880: 2151682112,
					1212416: 0,
					1277952: 4198400,
					1343488: 4194368,
					1409024: 2147483648,
					1474560: 2147487808,
					1540096: 64,
					1605632: 2147483712,
					1671168: 4096,
					1736704: 2147487744,
					1802240: 2151678016,
					1867776: 4160,
					1933312: 2151682048,
					1998848: 4194304,
					2064384: 4198464
				}, {
					0: 128,
					4096: 17039360,
					8192: 262144,
					12288: 536870912,
					16384: 537133184,
					20480: 16777344,
					24576: 553648256,
					28672: 262272,
					32768: 16777216,
					36864: 537133056,
					40960: 536871040,
					45056: 553910400,
					49152: 553910272,
					53248: 0,
					57344: 17039488,
					61440: 553648128,
					2048: 17039488,
					6144: 553648256,
					10240: 128,
					14336: 17039360,
					18432: 262144,
					22528: 537133184,
					26624: 553910272,
					30720: 536870912,
					34816: 537133056,
					38912: 0,
					43008: 553910400,
					47104: 16777344,
					51200: 536871040,
					55296: 553648128,
					59392: 16777216,
					63488: 262272,
					65536: 262144,
					69632: 128,
					73728: 536870912,
					77824: 553648256,
					81920: 16777344,
					86016: 553910272,
					90112: 537133184,
					94208: 16777216,
					98304: 553910400,
					102400: 553648128,
					106496: 17039360,
					110592: 537133056,
					114688: 262272,
					118784: 536871040,
					122880: 0,
					126976: 17039488,
					67584: 553648256,
					71680: 16777216,
					75776: 17039360,
					79872: 537133184,
					83968: 536870912,
					88064: 17039488,
					92160: 128,
					96256: 553910272,
					100352: 262272,
					104448: 553910400,
					108544: 0,
					112640: 553648128,
					116736: 16777344,
					120832: 262144,
					124928: 537133056,
					129024: 536871040
				}, {
					0: 268435464,
					256: 8192,
					512: 270532608,
					768: 270540808,
					1024: 268443648,
					1280: 2097152,
					1536: 2097160,
					1792: 268435456,
					2048: 0,
					2304: 268443656,
					2560: 2105344,
					2816: 8,
					3072: 270532616,
					3328: 2105352,
					3584: 8200,
					3840: 270540800,
					128: 270532608,
					384: 270540808,
					640: 8,
					896: 2097152,
					1152: 2105352,
					1408: 268435464,
					1664: 268443648,
					1920: 8200,
					2176: 2097160,
					2432: 8192,
					2688: 268443656,
					2944: 270532616,
					3200: 0,
					3456: 270540800,
					3712: 2105344,
					3968: 268435456,
					4096: 268443648,
					4352: 270532616,
					4608: 270540808,
					4864: 8200,
					5120: 2097152,
					5376: 268435456,
					5632: 268435464,
					5888: 2105344,
					6144: 2105352,
					6400: 0,
					6656: 8,
					6912: 270532608,
					7168: 8192,
					7424: 268443656,
					7680: 270540800,
					7936: 2097160,
					4224: 8,
					4480: 2105344,
					4736: 2097152,
					4992: 268435464,
					5248: 268443648,
					5504: 8200,
					5760: 270540808,
					6016: 270532608,
					6272: 270540800,
					6528: 270532616,
					6784: 8192,
					7040: 2105352,
					7296: 2097160,
					7552: 0,
					7808: 268435456,
					8064: 268443656
				}, {
					0: 1048576,
					16: 33555457,
					32: 1024,
					48: 1049601,
					64: 34604033,
					80: 0,
					96: 1,
					112: 34603009,
					128: 33555456,
					144: 1048577,
					160: 33554433,
					176: 34604032,
					192: 34603008,
					208: 1025,
					224: 1049600,
					240: 33554432,
					8: 34603009,
					24: 0,
					40: 33555457,
					56: 34604032,
					72: 1048576,
					88: 33554433,
					104: 33554432,
					120: 1025,
					136: 1049601,
					152: 33555456,
					168: 34603008,
					184: 1048577,
					200: 1024,
					216: 34604033,
					232: 1,
					248: 1049600,
					256: 33554432,
					272: 1048576,
					288: 33555457,
					304: 34603009,
					320: 1048577,
					336: 33555456,
					352: 34604032,
					368: 1049601,
					384: 1025,
					400: 34604033,
					416: 1049600,
					432: 1,
					448: 0,
					464: 34603008,
					480: 33554433,
					496: 1024,
					264: 1049600,
					280: 33555457,
					296: 34603009,
					312: 1,
					328: 33554432,
					344: 1048576,
					360: 1025,
					376: 34604032,
					392: 33554433,
					408: 34603008,
					424: 0,
					440: 34604033,
					456: 1049601,
					472: 1024,
					488: 33555456,
					504: 1048577
				}, {
					0: 134219808,
					1: 131072,
					2: 134217728,
					3: 32,
					4: 131104,
					5: 134350880,
					6: 134350848,
					7: 2048,
					8: 134348800,
					9: 134219776,
					10: 133120,
					11: 134348832,
					12: 2080,
					13: 0,
					14: 134217760,
					15: 133152,
					2147483648: 2048,
					2147483649: 134350880,
					2147483650: 134219808,
					2147483651: 134217728,
					2147483652: 134348800,
					2147483653: 133120,
					2147483654: 133152,
					2147483655: 32,
					2147483656: 134217760,
					2147483657: 2080,
					2147483658: 131104,
					2147483659: 134350848,
					2147483660: 0,
					2147483661: 134348832,
					2147483662: 134219776,
					2147483663: 131072,
					16: 133152,
					17: 134350848,
					18: 32,
					19: 2048,
					20: 134219776,
					21: 134217760,
					22: 134348832,
					23: 131072,
					24: 0,
					25: 131104,
					26: 134348800,
					27: 134219808,
					28: 134350880,
					29: 133120,
					30: 2080,
					31: 134217728,
					2147483664: 131072,
					2147483665: 2048,
					2147483666: 134348832,
					2147483667: 133152,
					2147483668: 32,
					2147483669: 134348800,
					2147483670: 134217728,
					2147483671: 134219808,
					2147483672: 134350880,
					2147483673: 134217760,
					2147483674: 134219776,
					2147483675: 0,
					2147483676: 133120,
					2147483677: 2080,
					2147483678: 131104,
					2147483679: 134350848
				}],
				h = [4160749569, 528482304, 33030144, 2064384, 129024, 8064, 504, 2147483679],
				f = n.DES = i.extend({
					_doReset: function() {
						for (var t = this._key.words, e = [], r = 0; r < 56; r++) {
							var i = o[r] - 1;
							e[r] = t[i >>> 5] >>> 31 - i % 32 & 1
						}
						for (var n = this._subKeys = [], a = 0; a < 16; a++) {
							var h = n[a] = [],
								l = c[a];
							for (r = 0; r < 24; r++) h[r / 6 | 0] |= e[(s[r] - 1 + l) % 28] << 31 - r % 6, h[4 + (r / 6 | 0)] |= e[28 + (s[r + 24] - 1 + l) % 28] << 31 - r % 6;
							h[0] = h[0] << 1 | h[0] >>> 31;
							for (r = 1; r < 7; r++) h[r] = h[r] >>> 4 * (r - 1) + 3;
							h[7] = h[7] << 5 | h[7] >>> 27
						}
						var f = this._invSubKeys = [];
						for (r = 0; r < 16; r++) f[r] = n[15 - r]
					},
					encryptBlock: function(t, e) {
						this._doCryptBlock(t, e, this._subKeys)
					},
					decryptBlock: function(t, e) {
						this._doCryptBlock(t, e, this._invSubKeys)
					},
					_doCryptBlock: function(t, e, r) {
						this._lBlock = t[e], this._rBlock = t[e + 1], u.call(this, 4, 252645135), u.call(this, 16, 65535), d.call(this, 2, 858993459), d.call(this, 8, 16711935), u.call(this, 1, 1431655765);
						for (var i = 0; i < 16; i++) {
							for (var n = r[i], o = this._lBlock, s = this._rBlock, c = 0, l = 0; l < 8; l++) c |= a[l][((s ^ n[l]) & h[l]) >>> 0];
							this._lBlock = s, this._rBlock = o ^ c
						}
						var f = this._lBlock;
						this._lBlock = this._rBlock, this._rBlock = f, u.call(this, 1, 1431655765), d.call(this, 8, 16711935), d.call(this, 2, 858993459), u.call(this, 16, 65535), u.call(this, 4, 252645135), t[e] = this._lBlock, t[e + 1] = this._rBlock
					},
					keySize: 2,
					ivSize: 2,
					blockSize: 2
				});

			function u(t, e) {
				var r = (this._lBlock >>> t ^ this._rBlock) & e;
				this._rBlock ^= r, this._lBlock ^= r << t
			}

			function d(t, e) {
				var r = (this._rBlock >>> t ^ this._lBlock) & e;
				this._lBlock ^= r, this._rBlock ^= r << t
			}
			t.DES = i._createHelper(f);
			var p = n.TripleDES = i.extend({
				_doReset: function() {
					var t = this._key.words;
					if (2 !== t.length && 4 !== t.length && t.length < 6) throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");
					var e = t.slice(0, 2),
						i = t.length < 4 ? t.slice(0, 2) : t.slice(2, 4),
						n = t.length < 6 ? t.slice(0, 2) : t.slice(4, 6);
					this._des1 = f.createEncryptor(r.create(e)), this._des2 = f.createEncryptor(r.create(i)), this._des3 = f.createEncryptor(r.create(n))
				},
				encryptBlock: function(t, e) {
					this._des1.encryptBlock(t, e), this._des2.decryptBlock(t, e), this._des3.encryptBlock(t, e)
				},
				decryptBlock: function(t, e) {
					this._des3.decryptBlock(t, e), this._des2.encryptBlock(t, e), this._des1.decryptBlock(t, e)
				},
				keySize: 6,
				ivSize: 2,
				blockSize: 2
			});
			t.TripleDES = i._createHelper(p)
		}(),
		function() {
			var t = l,
				e = t.lib.StreamCipher,
				r = t.algo,
				i = r.RC4 = e.extend({
					_doReset: function() {
						for (var t = this._key, e = t.words, r = t.sigBytes, i = this._S = [], n = 0; n < 256; n++) i[n] = n;
						n = 0;
						for (var o = 0; n < 256; n++) {
							var s = n % r,
								c = e[s >>> 2] >>> 24 - s % 4 * 8 & 255;
							o = (o + i[n] + c) % 256;
							var a = i[n];
							i[n] = i[o], i[o] = a
						}
						this._i = this._j = 0
					},
					_doProcessBlock: function(t, e) {
						t[e] ^= n.call(this)
					},
					keySize: 8,
					ivSize: 0
				});

			function n() {
				for (var t = this._S, e = this._i, r = this._j, i = 0, n = 0; n < 4; n++) {
					r = (r + t[e = (e + 1) % 256]) % 256;
					var o = t[e];
					t[e] = t[r], t[r] = o, i |= t[(t[e] + t[r]) % 256] << 24 - 8 * n
				}
				return this._i = e, this._j = r, i
			}
			t.RC4 = e._createHelper(i);
			var o = r.RC4Drop = i.extend({
				cfg: i.cfg.extend({
					drop: 192
				}),
				_doReset: function() {
					i._doReset.call(this);
					for (var t = this.cfg.drop; t > 0; t--) n.call(this)
				}
			});
			t.RC4Drop = e._createHelper(o)
		}(), l.mode.CTRGladman = function() {
			var t = l.lib.BlockCipherMode.extend();

			function e(t) {
				if (255 == (t >> 24 & 255)) {
					var e = t >> 16 & 255,
						r = t >> 8 & 255,
						i = 255 & t;
					255 === e ? (e = 0, 255 === r ? (r = 0, 255 === i ? i = 0 : ++i) : ++r) : ++e, t = 0, t += e << 16, t += r << 8, t += i
				} else t += 1 << 24;
				return t
			}
			var r = t.Encryptor = t.extend({
				processBlock: function(t, r) {
					var i = this._cipher,
						n = i.blockSize,
						o = this._iv,
						s = this._counter;
					o && (s = this._counter = o.slice(0), this._iv = void 0),
						function(t) {
							0 === (t[0] = e(t[0])) && (t[1] = e(t[1]))
						}(s);
					var c = s.slice(0);
					i.encryptBlock(c, 0);
					for (var a = 0; a < n; a++) t[r + a] ^= c[a]
				}
			});
			return t.Decryptor = r, t
		}(),
		function() {
			var t = l,
				e = t.lib.StreamCipher,
				r = t.algo,
				i = [],
				n = [],
				o = [],
				s = r.Rabbit = e.extend({
					_doReset: function() {
						for (var t = this._key.words, e = this.cfg.iv, r = 0; r < 4; r++) t[r] = 16711935 & (t[r] << 8 | t[r] >>> 24) | 4278255360 & (t[r] << 24 | t[r] >>> 8);
						var i = this._X = [t[0], t[3] << 16 | t[2] >>> 16, t[1], t[0] << 16 | t[3] >>> 16, t[2], t[1] << 16 | t[0] >>> 16, t[3], t[2] << 16 | t[1] >>> 16],
							n = this._C = [t[2] << 16 | t[2] >>> 16, 4294901760 & t[0] | 65535 & t[1], t[3] << 16 | t[3] >>> 16, 4294901760 & t[1] | 65535 & t[2], t[0] << 16 | t[0] >>> 16, 4294901760 & t[2] | 65535 & t[3], t[1] << 16 | t[1] >>> 16, 4294901760 & t[3] | 65535 & t[0]];
						this._b = 0;
						for (r = 0; r < 4; r++) c.call(this);
						for (r = 0; r < 8; r++) n[r] ^= i[r + 4 & 7];
						if (e) {
							var o = e.words,
								s = o[0],
								a = o[1],
								h = 16711935 & (s << 8 | s >>> 24) | 4278255360 & (s << 24 | s >>> 8),
								l = 16711935 & (a << 8 | a >>> 24) | 4278255360 & (a << 24 | a >>> 8),
								f = h >>> 16 | 4294901760 & l,
								u = l << 16 | 65535 & h;
							n[0] ^= h, n[1] ^= f, n[2] ^= l, n[3] ^= u, n[4] ^= h, n[5] ^= f, n[6] ^= l, n[7] ^= u;
							for (r = 0; r < 4; r++) c.call(this)
						}
					},
					_doProcessBlock: function(t, e) {
						var r = this._X;
						c.call(this), i[0] = r[0] ^ r[5] >>> 16 ^ r[3] << 16, i[1] = r[2] ^ r[7] >>> 16 ^ r[5] << 16, i[2] = r[4] ^ r[1] >>> 16 ^ r[7] << 16, i[3] = r[6] ^ r[3] >>> 16 ^ r[1] << 16;
						for (var n = 0; n < 4; n++) i[n] = 16711935 & (i[n] << 8 | i[n] >>> 24) | 4278255360 & (i[n] << 24 | i[n] >>> 8), t[e + n] ^= i[n]
					},
					blockSize: 4,
					ivSize: 2
				});

			function c() {
				for (var t = this._X, e = this._C, r = 0; r < 8; r++) n[r] = e[r];
				e[0] = e[0] + 1295307597 + this._b | 0, e[1] = e[1] + 3545052371 + (e[0] >>> 0 < n[0] >>> 0 ? 1 : 0) | 0, e[2] = e[2] + 886263092 + (e[1] >>> 0 < n[1] >>> 0 ? 1 : 0) | 0, e[3] = e[3] + 1295307597 + (e[2] >>> 0 < n[2] >>> 0 ? 1 : 0) | 0, e[4] = e[4] + 3545052371 + (e[3] >>> 0 < n[3] >>> 0 ? 1 : 0) | 0, e[5] = e[5] + 886263092 + (e[4] >>> 0 < n[4] >>> 0 ? 1 : 0) | 0, e[6] = e[6] + 1295307597 + (e[5] >>> 0 < n[5] >>> 0 ? 1 : 0) | 0, e[7] = e[7] + 3545052371 + (e[6] >>> 0 < n[6] >>> 0 ? 1 : 0) | 0, this._b = e[7] >>> 0 < n[7] >>> 0 ? 1 : 0;
				for (r = 0; r < 8; r++) {
					var i = t[r] + e[r],
						s = 65535 & i,
						c = i >>> 16,
						a = ((s * s >>> 17) + s * c >>> 15) + c * c,
						h = ((4294901760 & i) * i | 0) + ((65535 & i) * i | 0);
					o[r] = a ^ h
				}
				t[0] = o[0] + (o[7] << 16 | o[7] >>> 16) + (o[6] << 16 | o[6] >>> 16) | 0, t[1] = o[1] + (o[0] << 8 | o[0] >>> 24) + o[7] | 0, t[2] = o[2] + (o[1] << 16 | o[1] >>> 16) + (o[0] << 16 | o[0] >>> 16) | 0, t[3] = o[3] + (o[2] << 8 | o[2] >>> 24) + o[1] | 0, t[4] = o[4] + (o[3] << 16 | o[3] >>> 16) + (o[2] << 16 | o[2] >>> 16) | 0, t[5] = o[5] + (o[4] << 8 | o[4] >>> 24) + o[3] | 0, t[6] = o[6] + (o[5] << 16 | o[5] >>> 16) + (o[4] << 16 | o[4] >>> 16) | 0, t[7] = o[7] + (o[6] << 8 | o[6] >>> 24) + o[5] | 0
			}
			t.Rabbit = e._createHelper(s)
		}(), l.mode.CTR = function() {
			var t = l.lib.BlockCipherMode.extend(),
				e = t.Encryptor = t.extend({
					processBlock: function(t, e) {
						var r = this._cipher,
							i = r.blockSize,
							n = this._iv,
							o = this._counter;
						n && (o = this._counter = n.slice(0), this._iv = void 0);
						var s = o.slice(0);
						r.encryptBlock(s, 0), o[i - 1] = o[i - 1] + 1 | 0;
						for (var c = 0; c < i; c++) t[e + c] ^= s[c]
					}
				});
			return t.Decryptor = e, t
		}(),
		function() {
			var t = l,
				e = t.lib.StreamCipher,
				r = t.algo,
				i = [],
				n = [],
				o = [],
				s = r.RabbitLegacy = e.extend({
					_doReset: function() {
						var t = this._key.words,
							e = this.cfg.iv,
							r = this._X = [t[0], t[3] << 16 | t[2] >>> 16, t[1], t[0] << 16 | t[3] >>> 16, t[2], t[1] << 16 | t[0] >>> 16, t[3], t[2] << 16 | t[1] >>> 16],
							i = this._C = [t[2] << 16 | t[2] >>> 16, 4294901760 & t[0] | 65535 & t[1], t[3] << 16 | t[3] >>> 16, 4294901760 & t[1] | 65535 & t[2], t[0] << 16 | t[0] >>> 16, 4294901760 & t[2] | 65535 & t[3], t[1] << 16 | t[1] >>> 16, 4294901760 & t[3] | 65535 & t[0]];
						this._b = 0;
						for (var n = 0; n < 4; n++) c.call(this);
						for (n = 0; n < 8; n++) i[n] ^= r[n + 4 & 7];
						if (e) {
							var o = e.words,
								s = o[0],
								a = o[1],
								h = 16711935 & (s << 8 | s >>> 24) | 4278255360 & (s << 24 | s >>> 8),
								l = 16711935 & (a << 8 | a >>> 24) | 4278255360 & (a << 24 | a >>> 8),
								f = h >>> 16 | 4294901760 & l,
								u = l << 16 | 65535 & h;
							i[0] ^= h, i[1] ^= f, i[2] ^= l, i[3] ^= u, i[4] ^= h, i[5] ^= f, i[6] ^= l, i[7] ^= u;
							for (n = 0; n < 4; n++) c.call(this)
						}
					},
					_doProcessBlock: function(t, e) {
						var r = this._X;
						c.call(this), i[0] = r[0] ^ r[5] >>> 16 ^ r[3] << 16, i[1] = r[2] ^ r[7] >>> 16 ^ r[5] << 16, i[2] = r[4] ^ r[1] >>> 16 ^ r[7] << 16, i[3] = r[6] ^ r[3] >>> 16 ^ r[1] << 16;
						for (var n = 0; n < 4; n++) i[n] = 16711935 & (i[n] << 8 | i[n] >>> 24) | 4278255360 & (i[n] << 24 | i[n] >>> 8), t[e + n] ^= i[n]
					},
					blockSize: 4,
					ivSize: 2
				});

			function c() {
				for (var t = this._X, e = this._C, r = 0; r < 8; r++) n[r] = e[r];
				e[0] = e[0] + 1295307597 + this._b | 0, e[1] = e[1] + 3545052371 + (e[0] >>> 0 < n[0] >>> 0 ? 1 : 0) | 0, e[2] = e[2] + 886263092 + (e[1] >>> 0 < n[1] >>> 0 ? 1 : 0) | 0, e[3] = e[3] + 1295307597 + (e[2] >>> 0 < n[2] >>> 0 ? 1 : 0) | 0, e[4] = e[4] + 3545052371 + (e[3] >>> 0 < n[3] >>> 0 ? 1 : 0) | 0, e[5] = e[5] + 886263092 + (e[4] >>> 0 < n[4] >>> 0 ? 1 : 0) | 0, e[6] = e[6] + 1295307597 + (e[5] >>> 0 < n[5] >>> 0 ? 1 : 0) | 0, e[7] = e[7] + 3545052371 + (e[6] >>> 0 < n[6] >>> 0 ? 1 : 0) | 0, this._b = e[7] >>> 0 < n[7] >>> 0 ? 1 : 0;
				for (r = 0; r < 8; r++) {
					var i = t[r] + e[r],
						s = 65535 & i,
						c = i >>> 16,
						a = ((s * s >>> 17) + s * c >>> 15) + c * c,
						h = ((4294901760 & i) * i | 0) + ((65535 & i) * i | 0);
					o[r] = a ^ h
				}
				t[0] = o[0] + (o[7] << 16 | o[7] >>> 16) + (o[6] << 16 | o[6] >>> 16) | 0, t[1] = o[1] + (o[0] << 8 | o[0] >>> 24) + o[7] | 0, t[2] = o[2] + (o[1] << 16 | o[1] >>> 16) + (o[0] << 16 | o[0] >>> 16) | 0, t[3] = o[3] + (o[2] << 8 | o[2] >>> 24) + o[1] | 0, t[4] = o[4] + (o[3] << 16 | o[3] >>> 16) + (o[2] << 16 | o[2] >>> 16) | 0, t[5] = o[5] + (o[4] << 8 | o[4] >>> 24) + o[3] | 0, t[6] = o[6] + (o[5] << 16 | o[5] >>> 16) + (o[4] << 16 | o[4] >>> 16) | 0, t[7] = o[7] + (o[6] << 8 | o[6] >>> 24) + o[5] | 0
			}
			t.RabbitLegacy = e._createHelper(s)
		}(), l.pad.ZeroPadding = {
			pad: function(t, e) {
				var r = 4 * e;
				t.clamp(), t.sigBytes += r - (t.sigBytes % r || r)
			},
			unpad: function(t) {
				var e = t.words,
					r = t.sigBytes - 1;
				for (r = t.sigBytes - 1; r >= 0; r--)
					if (e[r >>> 2] >>> 24 - r % 4 * 8 & 255) {
						t.sigBytes = r + 1;
						break
					}
			}
		}, l
});
